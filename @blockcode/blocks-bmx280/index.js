import{addLocalesMessages as u,Text as b}from"@blockcode/core";import{Text as i}from"@blockcode/core";import{jsx as a}from"preact/jsx-runtime";var c=(r)=>r.editor!=="@blockcode/gui-arduino",n=(r)=>[c(r)&&{id:"init",text:a(i,{id:"blocks.bmx280.init",defaultMessage:"set pin SCL[SCL] pin SDA[SDA]"}),inputs:{SCL:{type:"integer",defaultValue:"2"},SDA:{type:"integer",defaultValue:"3"}},mpy(t){let e=this.valueToCode(t,"SCL",this.ORDER_NONE),o=this.valueToCode(t,"SDA",this.ORDER_NONE);if(this.definitions_.bmx280_addr){let m=this.definitions_.bmx280_addr.replace("# BMx280 addr: ","");this.definitions_.bmx280=`_bmx280 = bmx280.BMx280(${e}, ${o}, ${m})`}else this.definitions_.bmx280=`_bmx280 = bmx280.BMx280(${e}, ${o})`;let s="";return s+=`def get_bmx280_value(mode=2):
`,s+=`  _bmx280.read()
`,s+=`  if mode == 1: return _bmx280.temperature
`,s+=`  if mode == 2: return _bmx280.pressure
`,s+=`  if mode == 3: return _bmx280.humidity
`,s+=`  if mode == 4: return _bmx280.altitude
`,this.definitions_.get_bmx280_value=s,""}},{id:"addr",text:a(i,{id:"blocks.bmx280.addr",defaultMessage:"set I2C address [ADDR]"}),inputs:{ADDR:{menu:[["0×76","0x76"],["0×77","0x77"]]}},ino(t){let e=t.getFieldValue("ADDR");return this.definitions_.include_bmx280="#include <BMx280.h>",this.definitions_.variable_bmx280="BMx280 _bmx280;",this.definitions_.setup_bmx280=`_bmx280.beginI2C(${e});`,""},mpy(t){let e=t.getFieldValue("ADDR");return this.definitions_.bmx280_addr=`# BMx280 addr: ${e}`,""}},"---",{id:"pressure",text:a(i,{id:"blocks.bmx280.pressure",defaultMessage:"pressure atmosphere"}),output:"number",ino(t){if(this.definitions_.include_bmx280="#include <BMx280.h>",this.definitions_.variable_bmx280="BMx280 _bmx280;",!this.definitions_.setup_bmx280)this.definitions_.setup_bmx280="_bmx280.beginI2C();";let e="";return e+=`float getBMx280Value(int mode) {
`,e+=`  float T, P_hPa, H;
`,e+=`  _bmx280.read280(T, P_hPa, H);
`,e+=`  return mode == 1 ? T : (mode == 2 ? P_hPa : (mode == 3 && _bmx280.hasHumidity() ? H : 0.0));
`,e+="}",this.definitions_.declare_getBMx280Value="float getBMx280Value(int mode = 2);",this.definitions_.getBMx280Value=e,["getBMx280Value()",this.ORDER_FUNCTION_CALL]},mpy(t){return["get_bmx280_value()",this.ORDER_FUNCTION_CALL]}},{id:"altitude",text:a(i,{id:"blocks.bmx280.altitude",defaultMessage:"altitude"}),output:"number",ino(t){if(this.definitions_.include_bmx280="#include <BMx280.h>",this.definitions_.variable_bmx280="BMx280 _bmx280;",!this.definitions_.setup_bmx280)this.definitions_.setup_bmx280="_bmx280.beginI2C();";return["_bmx280.readAltitude()",this.ORDER_FUNCTION_CALL]},mpy(t){return this.definitions_.get_bmx280_value=bmxCode,["get_bmx280_value(4)",this.ORDER_FUNCTION_CALL]}},{id:"temperature",text:a(i,{id:"blocks.bmx280.temperature",defaultMessage:"temperature"}),output:"number",ino(t){if(this.definitions_.include_bmx280="#include <BMx280.h>",this.definitions_.variable_bmx280="BMx280 _bmx280;",!this.definitions_.setup_bmx280)this.definitions_.setup_bmx280="_bmx280.beginI2C();";let e="";return e+=`float getBMx280Value(int mode) {
`,e+=`  float T, P_hPa, H;
`,e+=`  _bmx280.read280(T, P_hPa, H);
`,e+=`  return mode == 1 ? T : (mode == 2 ? P_hPa : (mode == 3 && _bmx280.hasHumidity() ? H : 0.0));
`,e+="}",this.definitions_.declare_getBMx280Value="float getBMx280Value(int mode = 2);",this.definitions_.getBMx280Value=e,["getBMx280Value(1)",this.ORDER_FUNCTION_CALL]},mpy(t){return["get_bmx280_value(1)",this.ORDER_FUNCTION_CALL]}},{id:"humidity",text:a(i,{id:"blocks.bmx280.humidity",defaultMessage:"humidity"}),output:"number",ino(t){if(this.definitions_.include_bmx280="#include <BMx280.h>",this.definitions_.variable_bmx280="BMx280 _bmx280;",!this.definitions_.setup_bmx280)this.definitions_.setup_bmx280="_bmx280.beginI2C();";let e="";return e+=`float getBMx280Value(int mode) {
`,e+=`  float T, P_hPa, H;
`,e+=`  _bmx280.read280(T, P_hPa, H);
`,e+=`  return mode == 1 ? T : (mode == 2 ? P_hPa : (mode == 3 && _bmx280.hasHumidity() ? H : 0.0));
`,e+="}",this.definitions_.declare_getBMx280Value="float getBMx280Value(int mode = 2);",this.definitions_.getBMx280Value=e,["getBMx280Value(3)",this.ORDER_FUNCTION_CALL]},mpy(t){return["get_bmx280_value(3)",this.ORDER_FUNCTION_CALL]}}].filter(Boolean);var d="./assets/bmx280-x2q5zv14.py";var _={en:{"blocks.bmx280.name":"BMx280","blocks.bmx280.init":"set pin SCL[SCL] pin SDA[SDA]","blocks.bmx280.addr":"set I2C address [ADDR]","blocks.bmx280.pressure":"pressure atmosphere","blocks.bmx280.temperature":"temperature","blocks.bmx280.humidity":"humidity","blocks.bmx280.altitude":"altitude"},"zh-Hans":{"blocks.bmx280.name":"BMx280 气压","blocks.bmx280.init":"初始引脚 SCL[SCL] 引脚 SDA[SDA]","blocks.bmx280.addr":"初始 I2C 地址[ADDR]","blocks.bmx280.pressure":"气压","blocks.bmx280.temperature":"温度","blocks.bmx280.humidity":"湿度","blocks.bmx280.altitude":"海拔"},"zh-Hant":{"blocks.bmx280.name":"BMx280 氣壓","blocks.bmx280.init":"初始引腳 SCL[SCL] 引腳 SDA[SDA]","blocks.bmx280.addr":"初始 I2C 地址[ADDR]","blocks.bmx280.pressure":"氣壓","blocks.bmx280.temperature":"溫度","blocks.bmx280.humidity":"濕度","blocks.bmx280.altitude":"海拔"}};var l="./assets/icon-pz4ha9b9.png";import{jsx as x}from"preact/jsx-runtime";u(_);var L={icon:l,name:x(b,{id:"blocks.bmx280.name",defaultMessage:"BMP280"}),files(r){if(r.editor!=="@blockcode/gui-arduino")return[{name:"bmx280",type:"text/x-python",uri:d}];return[]},blocks:n};export{L as default};
