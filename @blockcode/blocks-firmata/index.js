import{addLocalesMessages as s0,Text as n0}from"@blockcode/core";import{setAlert as B0,Text as c0,Spinner as t0}from"@blockcode/core";import{ArduinoUtils as o0}from"@blockcode/board";var _=Symbol.for,A=Symbol("kCapture"),b=_("events.errorMonitor"),R=Symbol("events.maxEventTargetListeners"),X=Symbol("events.maxEventTargetListenersWarned"),w=_("nodejs.rejection"),Y=_("nodejs.rejection"),x=Array.prototype.slice,s=10,o=function(l){if(this._events===void 0||this._events===this.__proto__._events)this._events={__proto__:null},this._eventsCount=0;if(this._maxListeners??=void 0,this[A]=l?.captureRejections?Boolean(l?.captureRejections):e[A])this.emit=L},e=o.prototype={};e._events=void 0;e._eventsCount=0;e._maxListeners=void 0;e.setMaxListeners=function(l){return u(l,"setMaxListeners",0),this._maxListeners=l,this};e.constructor=o;e.getMaxListeners=function(){return this?._maxListeners??s};function m(F,l){var{_events:i}=F;if(l[0]??=Error("Unhandled error."),!i)throw l[0];var E=i[b];if(E)for(var C of x.call(E))C.apply(F,l);var d=i.error;if(!d)throw l[0];for(var C of x.call(d))C.apply(F,l);return!0}function K(F,l,i,E){l.then(void 0,function(C){queueMicrotask(()=>G(F,C,i,E))})}function G(F,l,i,E){if(typeof F[w]==="function")F[w](l,i,...E);else try{F[A]=!1,F.emit("error",l)}finally{F[A]=!0}}var J=function(l,...i){if(l==="error")return m(this,i);var{_events:E}=this;if(E===void 0)return!1;var C=E[l];if(C===void 0)return!1;let d=C.length>1?C.slice():C;for(let D=0,{length:r}=d;D<r;D++){let f=d[D];switch(i.length){case 0:f.call(this);break;case 1:f.call(this,i[0]);break;case 2:f.call(this,i[0],i[1]);break;case 3:f.call(this,i[0],i[1],i[2]);break;default:f.apply(this,i);break}}return!0},L=function(l,...i){if(l==="error")return m(this,i);var{_events:E}=this;if(E===void 0)return!1;var C=E[l];if(C===void 0)return!1;let d=C.length>1?C.slice():C;for(let D=0,{length:r}=d;D<r;D++){let f=d[D],B;switch(i.length){case 0:B=f.call(this);break;case 1:B=f.call(this,i[0]);break;case 2:B=f.call(this,i[0],i[1]);break;case 3:B=f.call(this,i[0],i[1],i[2]);break;default:B=f.apply(this,i);break}if(B!==void 0&&typeof B?.then==="function"&&B.then===Promise.prototype.then)K(this,B,l,i)}return!0};e.emit=J;e.addListener=function(l,i){h(i);var E=this._events;if(!E)E=this._events={__proto__:null},this._eventsCount=0;else if(E.newListener)this.emit("newListener",l,i.listener??i);var C=E[l];if(!C)E[l]=[i],this._eventsCount++;else{C.push(i);var d=this._maxListeners??s;if(d>0&&C.length>d&&!C.warned)k(this,l,C)}return this};e.on=e.addListener;e.prependListener=function(l,i){h(i);var E=this._events;if(!E)E=this._events={__proto__:null},this._eventsCount=0;else if(E.newListener)this.emit("newListener",l,i.listener??i);var C=E[l];if(!C)E[l]=[i],this._eventsCount++;else{C.unshift(i);var d=this._maxListeners??s;if(d>0&&C.length>d&&!C.warned)k(this,l,C)}return this};function k(F,l,i){i.warned=!0;let E=Error(`Possible EventEmitter memory leak detected. ${i.length} ${String(l)} listeners added to [${F.constructor.name}]. Use emitter.setMaxListeners() to increase limit`);E.name="MaxListenersExceededWarning",E.emitter=F,E.type=l,E.count=i.length,console.warn(E)}function N(F,l,...i){this.removeListener(F,l),l.apply(this,i)}e.once=function(l,i){h(i);let E=N.bind(this,l,i);return E.listener=i,this.addListener(l,E),this};e.prependOnceListener=function(l,i){h(i);let E=N.bind(this,l,i);return E.listener=i,this.prependListener(l,E),this};e.removeListener=function(l,i){h(i);var{_events:E}=this;if(!E)return this;var C=E[l];if(!C)return this;var d=C.length;let D=-1;for(let r=d-1;r>=0;r--)if(C[r]===i||C[r].listener===i){D=r;break}if(D<0)return this;if(D===0)C.shift();else C.splice(D,1);if(C.length===0)delete E[l],this._eventsCount--;return this};e.off=e.removeListener;e.removeAllListeners=function(l){var{_events:i}=this;if(l&&i){if(i[l])delete i[l],this._eventsCount--}else this._events={__proto__:null};return this};e.listeners=function(l){var{_events:i}=this;if(!i)return[];var E=i[l];if(!E)return[];return E.map((C)=>C.listener??C)};e.rawListeners=function(l){var{_events:i}=this;if(!i)return[];var E=i[l];if(!E)return[];return E.slice()};e.listenerCount=function(l){var{_events:i}=this;if(!i)return 0;return i[l]?.length??0};e.eventNames=function(){return this._eventsCount>0?Reflect.ownKeys(this._events):[]};e[A]=!1;function j(F,l,i){var E=i?.signal;if(I(E,"options.signal"),E?.aborted)throw new p(void 0,{cause:E?.reason});let{resolve:C,reject:d,promise:D}=$newPromiseCapability(Promise),r=(y)=>{if(F.removeListener(l,f),E!=null)a(E,"abort",B);d(y)},f=(...y)=>{if(typeof F.removeListener==="function")F.removeListener("error",r);if(E!=null)a(E,"abort",B);C(y)};if(g(F,l,f,{once:!0}),l!=="error"&&typeof F.once==="function")F.once("error",r);function B(){a(F,l,f),a(F,"error",r),d(new p(void 0,{cause:E?.reason}))}if(E!=null)g(E,"abort",B,{once:!0});return D}function v(F,l){return F.listeners(l)}function F0(F,...l){u(F,"setMaxListeners",0);var i;if(l&&(i=l.length))for(let E=0;E<i;E++)l[E].setMaxListeners(F);else s=F}function l0(F,l){return F.listenerCount(l)}function a(F,l,i,E){if(typeof F.removeListener==="function")F.removeListener(l,i);else F.removeEventListener(l,i,E)}function g(F,l,i,E){if(typeof F.on==="function")if(E.once)F.once(l,i);else F.on(l,i);else F.addEventListener(l,i,E)}class p extends Error{constructor(F="The operation was aborted",l=void 0){if(l!==void 0&&typeof l!=="object")throw n("options","Object",l);super(F,l);this.code="ABORT_ERR",this.name="AbortError"}}function n(F,l,i){let E=TypeError(`The "${F}" argument must be of type ${l}. Received ${i}`);return E.code="ERR_INVALID_ARG_TYPE",E}function i0(F,l,i){let E=RangeError(`The "${F}" argument is out of range. It must be ${l}. Received ${i}`);return E.code="ERR_OUT_OF_RANGE",E}function I(F,l){if(F!==void 0&&(F===null||typeof F!=="object"||!("aborted"in F)))throw n(l,"AbortSignal",F)}function u(F,l,i,E){if(typeof F!=="number")throw n(l,"number",F);if(i!=null&&F<i||E!=null&&F>E||(i!=null||E!=null)&&Number.isNaN(F))throw i0(l,`${i!=null?`>= ${i}`:""}${i!=null&&E!=null?" && ":""}${E!=null?`<= ${E}`:""}`,F)}function h(F){if(typeof F!=="function")throw TypeError("The listener must be a function")}function E0(F,l){if(typeof F!=="boolean")throw n(l,"boolean",F)}function C0(F){return F?._maxListeners??s}function e0(F,l){if(F===void 0)throw n("signal","AbortSignal",F);if(I(F,"signal"),typeof l!=="function")throw n("listener","function",l);let i;if(F.aborted)queueMicrotask(()=>l());else F.addEventListener("abort",l,{__proto__:null,once:!0}),i=()=>{F.removeEventListener("abort",l)};return{__proto__:null,[Symbol.dispose](){i?.()}}}Object.defineProperties(o,{captureRejections:{get(){return e[A]},set(F){E0(F,"EventEmitter.captureRejections"),e[A]=F},enumerable:!0},defaultMaxListeners:{enumerable:!0,get:()=>{return s},set:(F)=>{u(F,"defaultMaxListeners",0),s=F}},kMaxEventTargetListeners:{value:R,enumerable:!1,configurable:!1,writable:!1},kMaxEventTargetListenersWarned:{value:X,enumerable:!1,configurable:!1,writable:!1}});Object.assign(o,{once:j,getEventListeners:v,getMaxListeners:C0,setMaxListeners:F0,EventEmitter:o,usingDomains:!1,captureRejectionSymbol:Y,errorMonitor:b,addAbortListener:e0,init:o,listenerCount:l0});import{sleepMs as D0}from"@blockcode/utils";import{setAlert as U,delAlert as Z0,Text as V,Spinner as f0}from"@blockcode/core";import{ArduinoUtils as r0}from"@blockcode/board";var P="./assets/firmata-express.ino-4y83qer1.hex";import{jsx as Z}from"preact/jsx-runtime";var O=(F)=>{if(F<100)U({id:"firmata-uploading",icon:Z(f0,{level:"success"}),message:Z(V,{id:"blocks.firmata.firmware",defaultMessage:"Updating firmware...{progress}%",progress:F})});else U({id:"firmata-uploading",icon:null,message:Z(V,{id:"blocks.firmata.completed",defaultMessage:"Updating firmware completed."})},2000)};class M extends o{constructor(F){super();this._board=F,this._writeQueue=[],F.serial.on("disconnect",(l)=>{this.emit("close",l)}),F.serial.on("connect",(l)=>{this.emit("open",l)}),F.serial.on("error",(l)=>{this.emit("error",l)}),F.serial.on("data",(l)=>{this.emit("data",l)})}get board(){return this._board}async flash(){O(0);let l=await(await fetch(P)).arrayBuffer();if(await r0.write(this.board,l,O),this.board.type==="serial")await D0(2000)}async write(F,l){await this._write(F,"binary"),l?.()}_write(F){return new Promise((l,i)=>{if(this._writeQueue.push({data:F,resolve:l,reject:i}),!this._writing)this._processWriteQueue()})}async _processWriteQueue(){if(this._writeQueue.length===0||this._writing)return;this._writing=!0;let{data:F,resolve:l,reject:i}=this._writeQueue.shift();try{await this.board.serial.write(F,"binary"),l()}catch(E){i(E)}finally{if(this._writing=!1,this._writeQueue.length>0)this._processWriteQueue()}}}import{delAlert as T}from"@blockcode/core";class z{constructor(){this.board=null}get key(){return"firmata"}connect(){this.board.reportVersion(()=>{}),this.board.queryFirmware(()=>{}),this.board.on("ready",()=>{T("firmata-checking"),this.board.queryCapabilities(()=>{this.board.queryAnalogMapping(()=>{})})}),this.board.on("reportVersionTimeout",async()=>{T("firmata-checking"),await this.board.transport.flash(),this.board.reportVersion(()=>{}),this.board.queryFirmware(()=>{})})}getAnalogValue(F){let l=parseInt(F),i=this.board.pins[this.board.analogPins[l]];if(i)if(i.report&&i.report===1)return i.value;else return this.board.reportAnalogPin(l,1),i.value}getDigitalValue(F){let l=parseInt(F),i=this.board.pins[l];if(i)if(i.report&&i.report===1)return Boolean(i.value);else return this.board.pinMode(l,this.board.MODES.PULLUP),this.board.reportDigitalPin(l,1),Boolean(i.value)}writePWM(F,l){let i=parseInt(F),E=parseInt(l);this.board.pinMode(i,this.board.MODES.PWM),this.board.pwmWrite(i,E)}writeDigital(F,l){let i=parseInt(F),E=parseInt(l),C=this.board.pins[i];if(C&&C.mode&&C.mode!=this.board.MODES.OUTPUT)this.board.pinMode(i,this.board.MODES.OUTPUT);this.board.digitalWrite(i,E)}getSonarDistance(F,l){let i=parseInt(F),E=parseInt(l),C=this.board.pins[i];if(C)if(C.report&&C.report===1)return C.value;else return this.board.reportSonarData(i,E),!1}getDHTTemp(F){let l=parseInt(F),i=this.board.pins[l];if(i)if(i.report&&i.report===1)return i.value[1];else return this.board.reportDHTData(l),!1}getDHTHum(F){let l=parseInt(F),i=this.board.pins[l];if(i)if(i.report&&i.report===1)return i.value[0];else return this.board.reportDHTData(l),!1}playTone(F,l,i){let E=parseInt(F),C=parseInt(l),d=parseInt(i),D=this.board.pins[E];if(D&&D.mode&&D.mode!=this.board.MODES.TONE)this.board.pinMode(E,this.board.MODES.TONE);this.board.play_tone(E,C,d)}writeServo(F,l){let i=parseInt(F),E=parseInt(l),C=this.board.pins[i];if(C&&C.mode&&C.mode!=this.board.MODES.SERVO)this.board.servoConfig(i,544,2400);this.board.servoWrite(i,E)}reset(){this.board.reset(),this.board.pins.forEach((F)=>{if(F&&F.report&&F.report===1)F.report=0})}}import{jsx as Q}from"preact/jsx-runtime";function S(F){let l=new z;return F.on("connecting",async(i)=>{B0({id:"firmata-checking",icon:Q(t0,{level:"success"}),message:Q(c0,{id:"blocks.firmata.checking",defaultMessage:"Checking firmware..."})});let E=await o0.bindingFirmata(i,M);l.board=E,l.connect()}),F.on("disconnect",()=>{l.disconnect()}),F.on("stop",()=>{l.reset()}),l}import{Text as c}from"@blockcode/core";import{jsx as t}from"preact/jsx-runtime";var H=[{id:"readAnalog",text:t(c,{id:"blocks.firmata.readAnalog",defaultMessage:"read analog [PIN] value"}),inputs:{PIN:{menu:"analogPin"}},output:"number",emu(F){return[`runtime.extensions.firmata.getAnalogValue(${F.getFieldValue("PIN")||"0"})`,this.ORDER_FUNCTION_CALL]}},{id:"readDigital",text:t(c,{id:"blocks.firmata.readDigital",defaultMessage:"read digital [PIN] value"}),inputs:{PIN:{menu:"digitalPin"}},output:"boolean",emu(F){return[`runtime.extensions.firmata.getDigitalValue(${F.getFieldValue("PIN")||"0"})`,this.ORDER_FUNCTION_CALL]}},{id:"readDistance",text:t(c,{id:"blocks.firmata.readDistance",defaultMessage:"Read SONAR trig [PIN_T] echo [PIN_E]"}),inputs:{PIN_T:{menu:"digitalPin"},PIN_E:{menu:"digitalPin"}},output:"number",emu(F){let l=F.getFieldValue("PIN_T")||"0",i=F.getFieldValue("PIN_E")||"0";return[`runtime.extensions.firmata.getSonarDistance(${l}, ${i})`,this.ORDER_FUNCTION_CALL]}},{id:"readTemp",text:t(c,{id:"blocks.firmata.readTemp",defaultMessage:"read temperature [PIN] value"}),inputs:{PIN:{menu:"digitalPin"}},output:"number",emu(F){return[`runtime.extensions.firmata.getDHTTemp(${F.getFieldValue("PIN")||"0"})`,this.ORDER_FUNCTION_CALL]}},{id:"readHum",text:t(c,{id:"blocks.firmata.readHum",defaultMessage:"read humidity [PIN] value"}),inputs:{PIN:{menu:"digitalPin"}},output:"number",emu(F){return[`runtime.extensions.firmata.getDHTHum(${F.getFieldValue("PIN")||"0"})`,this.ORDER_FUNCTION_CALL]}},{id:"setPWM",text:t(c,{id:"blocks.firmata.setPWM",defaultMessage:"set PWM  [PIN] value [VALUE]"}),inputs:{PIN:{menu:"pwmPin"},VALUE:{type:"number",defaultValue:"50"}},emu(F){let l=F.getFieldValue("PIN")||"3",i=this.quote_(this.valueToCode(F,"VALUE",this.ORDER_NONE))||"50";return`runtime.extensions.firmata.writePWM(${l}, ${i});
`}},{id:"setDigital",text:t(c,{id:"blocks.firmata.setDigital",defaultMessage:"set digital  [PIN] value [VALUE]"}),inputs:{PIN:{menu:"digitalPin"},VALUE:{menu:"highLow"}},emu(F){let l=F.getFieldValue("PIN")||"0",i=F.getFieldValue("VALUE")||"0";return`runtime.extensions.firmata.writeDigital(${l}, ${i});
`}},{id:"writeServo",text:t(c,{id:"blocks.firmata.writeServo",defaultMessage:"write servo PIN [PIN] [VALUE] deg"}),inputs:{PIN:{menu:"pwmPin"},VALUE:{type:"number",defaultValue:"90"}},emu(F){let l=F.getFieldValue("PIN")||"3",i=this.quote_(this.valueToCode(F,"VALUE",this.ORDER_NONE))||"90";return`runtime.extensions.firmata.writeServo(${l}, ${i});
`}},{id:"playTone",text:t(c,{id:"blocks.firmata.playTone",defaultMessage:"tone pin [PIN] [FREQUENCY] HZ [DURATION] ms"}),inputs:{PIN:{menu:"pwmPin"},FREQUENCY:{type:"number",defaultValue:"100"},DURATION:{type:"number",defaultValue:"1000"}},emu(F){let l=F.getFieldValue("PIN")||"3",i=this.quote_(this.valueToCode(F,"FREQUENCY",this.ORDER_NONE))||"100",E=this.quote_(this.valueToCode(F,"DURATION",this.ORDER_NONE))||"100";return`runtime.extensions.firmata.playTone(${l}, ${i}, ${E});
`}}],$={analogPin:{type:"string",defaultValue:"0",items:[["A0","0"],["A1","1"],["A2","2"],["A3","3"],["A4","4"],["A5","5"]]},digitalPin:{type:"string",defaultValue:"0",items:[["D0","0"],["D1","1"],["D2","2"],["D3","3"],["D4","4"],["D5","5"],["D6","6"],["D7","7"],["D8","8"],["D9","9"],["D10","10"],["D11","11"],["D12","12"],["D13","13"]]},pwmPin:{type:"string",defaultValue:"3",items:[["D3","3"],["D5","5"],["D6","6"],["D9","9"],["D10","10"],["D11","11"]]},highLow:{type:"string",defaultValue:"0",items:[[t(c,{id:"blocks.firmata.high",defaultMessage:"high"}),"1"],[t(c,{id:"blocks.firmata.low",defaultMessage:"low"}),"0"]]}};var W={en:{"blocks.firmata.name":"Arduino Firmata","blocks.firmata.checking":"Checking firmware...","blocks.firmata.firmware":"Updating firmware...{progress}%","blocks.firmata.completed":"Updating firmware completed.","blocks.firmata.readAnalog":"read analog [PIN] value","blocks.firmata.readDigital":"read digital [PIN] value","blocks.firmata.readDistance":"Read SONAR trig [PIN_T] echo [PIN_E]","blocks.firmata.readTemp":"read temperature [PIN] value","blocks.firmata.readHum":"read humidity [PIN] value","blocks.firmata.setPWM":"set PWM [PIN] value [VALUE]","blocks.firmata.setDigital":"set digital [PIN] value [VALUE]","blocks.firmata.writeServo":"write servo PIN [PIN] [VALUE] deg","blocks.firmata.playTone":"tone pin [PIN] [FREQUENCY] HZ [DURATION] ms","blocks.firmata.high":"high","blocks.firmata.low":"low"},"zh-Hans":{"blocks.firmata.name":"Arduino Firmata","blocks.firmata.checking":"检查固件…","blocks.firmata.firmware":"正在更新固件…{progress}%","blocks.firmata.completed":"更新固件完成。","blocks.firmata.readAnalog":"读取模拟口 [PIN] 值","blocks.firmata.readDigital":"读取数字口 [PIN] 值","blocks.firmata.readDistance":"读取超声波距离 trig [PIN_T] echo[PIN_E]","blocks.firmata.readTemp":"读取温度传感器 [PIN] 的温度值","blocks.firmata.readHum":"读取湿度传感器 [PIN] 的湿度值","blocks.firmata.setPWM":"设置PWM接口 [PIN] 值为 [VALUE]","blocks.firmata.setDigital":"设置数字接口 [PIN] 电平状态为 [VALUE]","blocks.firmata.writeServo":"设置舵机引脚 [PIN] 为 [VALUE] 度","blocks.firmata.playTone":"设置蜂鸣器引脚 [PIN] 频率为 [FREQUENCY] HZ 时间为 [DURATION] ms","blocks.firmata.high":"高","blocks.firmata.low":"低"},"zh-Hant":{"blocks.firmata.name":"Arduino Firmata","blocks.firmata.checking":"檢查固件…","blocks.firmata.firmware":"正在更新固件…{progress}%","blocks.firmata.completed":"更新固件完成。","blocks.firmata.readAnalog":"讀取模擬口 [PIN] 值","blocks.firmata.readDigital":"讀取數字口 [PIN] 值","blocks.firmata.readDistance":"讀取超聲波距離 trig [PIN_T] echo[PIN_E]","blocks.firmata.readTemp":"讀取溫度傳感器 [PIN] 的溫度值","blocks.firmata.readHum":"讀取濕度傳感器 [PIN] 的濕度值","blocks.firmata.setPWM":"設置PWM接口 [PIN] 值為 [VALUE]","blocks.firmata.setDigital":"設置數字接口 [PIN] 電平狀態為 [VALUE]","blocks.firmata.writeServo":"設置舵機引腳 [PIN] 為 [VALUE] 度","blocks.firmata.playTone":"設置蜂鳴器引腳 [PIN] 頻率為 [FREQUENCY] HZ 時間為 [DURATION] ms","blocks.firmata.high":"高","blocks.firmata.low":"低"}};var q="./assets/icon-1syrnfvn.svg";import{jsx as h0}from"preact/jsx-runtime";s0(W);var X0={icon:q,name:h0(n0,{id:"blocks.firmata.name",defaultMessage:"Arduino Firmata"}),statusButton:{connectionOptions:{serial:{filters:[{usbVendorId:9025}]},bluetooth:{filters:[{services:["0000ffe0-0000-1000-8000-00805f9b34fb"]}]}}},emulator:S,blocks:H,menus:$};export{X0 as default};
