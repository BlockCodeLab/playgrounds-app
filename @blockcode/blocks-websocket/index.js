import{addLocalesMessages as g,Text as C}from"@blockcode/core";function l(s){let e={},t,i;return s.on("stop",()=>{s.extensions.websocket?.disconnect()}),{get key(){return"websocket"},connect(c){return this.disconnect(),new Promise((o)=>{try{let r=new WebSocket(`${c}`);r.addEventListener("open",()=>{t=r,s.call("websocket.connected"),o()}),r.addEventListener("message",(d)=>{if(i=null,e.text!==d.data)delete e.json;e.text=d.data,s.call("websocket.received")}),r.addEventListener("close",()=>{s.call("websocket.disconnected"),i=null,t=null}),r.addEventListener("error",(d)=>{i=d,s.call("websocket.errors"),o()})}catch(r){i=r,s.call("websocket.errors"),o()}})},disconnect(){if(t)t.close(),s.call("websocket.disconnected"),i=null,t=null},isConnected(){return t?.readyState===WebSocket.OPEN},isDisconnected(){return!t||t.readyState===WebSocket.CLOSED||t.readyState===WebSocket.CLOSING},isErrors(){return i!=null},send(c){if(this.isConnected()){i=null;try{if(typeof c==="object")c=JSON.stringify(c);t.send(c)}catch(o){i=o,s.call("websocket.errors")}}},getText(){return e.text??""},getData(c){if(!e.text)return"";if(!e.json)try{e.json=JSON.parse(e.text)}catch(r){e.json={}}let o=e;c=`${c}`.split(".");for(let r of c)if(o=Array.isArray(o)?o.at(MathUtils.serialToIndex(r,o.length)):o[r],o!==0&&!o)return"";return o}}}import{Text as n}from"@blockcode/core";import{jsx as a}from"preact/jsx-runtime";var f=[{id:"connect",text:a(n,{id:"blocks.websocket.connect",defaultMessage:"connect to [URL]"}),inputs:{URL:{type:"text",defaultValue:"wss://echo.websocket.org/"}},mpy(s){return`await websocket.connect(${this.valueToCode(s,"URL",this.ORDER_NONE)})
`},emu(s){return`await runtime.extensions.websocket.connect(${this.valueToCode(s,"URL",this.ORDER_NONE)});
`}},"---",{id:"send",text:a(n,{id:"blocks.websocket.send",defaultMessage:"send message [MESSAGE]"}),inputs:{MESSAGE:{type:"text",defaultValue:"hello"}},mpy(s){return`websocket.send(${this.valueToCode(s,"MESSAGE",this.ORDER_NONE)})
`},emu(s){return`runtime.extensions.websocket.send(${this.valueToCode(s,"MESSAGE",this.ORDER_NONE)});
`}},"---",{id:"whenMessageReceived",text:a(n,{id:"blocks.websocket.whenMessageReceived",defaultMessage:"when message received"}),hat:!0,mpy(s){let e=this.statementToCode(s);e=this.addEventTrap(e,s.id);let t="";return t+=`@when(websocket.WEBSOCKET_RECEIVED)
`,t+=e,t},emu(s){let e=this.statementToCode(s);return e=this.addEventTrap(e,s.id),`runtime.when('websocket.received', ${e});
`}},{id:"receivedJSON",text:a(n,{id:"blocks.websocket.receivedJSON",defaultMessage:"item [PATH] of received JSON data"}),output:"text",inputs:{PATH:{type:"text",defaultValue:"path.2.item"}},mpy(s){return[`websocket.get_data(${this.valueToCode(s,"PATH",this.ORDER_NONE)})`,this.ORDER_FUNCTION_CALL]},emu(s){return[`runtime.extensions.websocket.getData(${this.valueToCode(s,"PATH",this.ORDER_NONE)})`,this.ORDER_FUNCTION_CALL]}},{id:"receivedText",text:a(n,{id:"blocks.websocket.receivedText",defaultMessage:"received text message"}),output:"text",mpy(s){return["websocket.get_text()",this.ORDER_FUNCTION_CALL]},emu(s){return["runtime.extensions.websocket.getText()",this.ORDER_FUNCTION_CALL]}},"---",{id:"whenConnected",text:a(n,{id:"blocks.websocket.whenConnected",defaultMessage:"when connected"}),hat:!0,mpy(s){let e=this.statementToCode(s);e=this.addEventTrap(e,s.id);let t="";return t+=`@when(websocket.WEBSOCKET_CONNECTED)
`,t+=e,t},emu(s){let e=this.statementToCode(s);return e=this.addEventTrap(e,s.id),`runtime.when('websocket.connected', ${e});
`}},{id:"whenConnectionErrors",text:a(n,{id:"blocks.websocket.whenConnectionErrors",defaultMessage:"when connection errors"}),hat:!0,mpy(s){let e=this.statementToCode(s);e=this.addEventTrap(e,s.id);let t="";return t+=`@when(websocket.WEBSOCKET_ERRORS)
`,t+=e,t},emu(s){let e=this.statementToCode(s);return e=this.addEventTrap(e,s.id),`runtime.when('websocket.errors', ${e});
`}},{id:"whenConnectionCloses",text:a(n,{id:"blocks.websocket.whenConnectionCloses",defaultMessage:"when connection closes"}),hat:!0,mpy(s){let e=this.statementToCode(s);e=this.addEventTrap(e,s.id);let t="";return t+=`@when(websocket.WEBSOCKET_DISCONNECTED)
`,t+=e,t},emu(s){let e=this.statementToCode(s);return e=this.addEventTrap(e,s.id),`runtime.when('websocket.disconnected', ${e});
`}},{id:"closeConnection",text:a(n,{id:"blocks.websocket.closeConnection",defaultMessage:"close connection"}),mpy(s){return`websocket.disconnect()
`},emu(s){return`runtime.extensions.websocket.disconnect();
`}},"---",{id:"isConnected",text:a(n,{id:"blocks.websocket.isConnected",defaultMessage:"is connected?"}),output:"boolean",mpy(s){return["websocket.is_connected()",this.ORDER_FUNCTION_CALL]},emu(s){return["runtime.extensions.websocket.isConnected()",this.ORDER_FUNCTION_CALL]}},{id:"isConnectionErrored",text:a(n,{id:"blocks.websocket.isConnectionErrored",defaultMessage:"is connection errored?"}),output:"boolean",mpy(s){return["websocket.is_errors()",this.ORDER_FUNCTION_CALL]},emu(s){return["runtime.extensions.websocket.isErrors()",this.ORDER_FUNCTION_CALL]}},{id:"isConnectionClosed",text:a(n,{id:"blocks.websocket.isConnectionClosed",defaultMessage:"is connection cloased?"}),output:"boolean",mpy(s){return["websocket.is_disonnected()",this.ORDER_FUNCTION_CALL]},emu(s){return["runtime.extensions.websocket.isDisonnected()",this.ORDER_FUNCTION_CALL]}}];var p="./assets/websocket-c6k2mapr.py";var h="./assets/aiohttp-0qva3nva.py";var _="./assets/aiohttp_ws-cykkq64e.py";var u={en:{"blocks.websocket.name":"WebSocket","blocks.websocket.connect":"connect to [URL]","blocks.websocket.send":"send message [MESSAGE]","blocks.websocket.whenMessageReceived":"when message received","blocks.websocket.receivedText":"received text message","blocks.websocket.receivedJSON":"item [PATH] of received JSON data","blocks.websocket.whenConnected":"when connected to WebSocket server","blocks.websocket.isConnected":"is connected?","blocks.websocket.whenConnectionErrors":"when connection errors","blocks.websocket.isConnectionErrored":"is connection errored?","blocks.websocket.whenConnectionCloses":"when connection closes","blocks.websocket.isConnectionClosed":"is connection cloased?","blocks.websocket.closeConnection":"close connection"},"zh-Hans":{"blocks.websocket.name":"WebSocket","blocks.websocket.connect":"连接到 [URL]","blocks.websocket.send":"发送消息 [MESSAGE]","blocks.websocket.whenMessageReceived":"当接收到消息","blocks.websocket.receivedText":"文本消息","blocks.websocket.receivedJSON":"JSON 数据路径 [PATH] 的项","blocks.websocket.whenConnected":"当连接到 WebSocket 服务器","blocks.websocket.isConnected":"连接成功？","blocks.websocket.whenConnectionErrors":"当连接发生错误","blocks.websocket.isConnectionErrored":"连接发生错误？","blocks.websocket.whenConnectionCloses":"当连接关闭","blocks.websocket.isConnectionClosed":"连接关闭？","blocks.websocket.closeConnection":"关闭连接"},"zh-Hant":{"blocks.websocket.name":"WebSocket","blocks.websocket.connect":"連接到 [URL]","blocks.websocket.send":"發送消息 [MESSAGE]","blocks.websocket.whenMessageReceived":"當接收到消息","blocks.websocket.receivedText":"文本消息","blocks.websocket.receivedJSON":"JSON 數據路徑 [PATH] 的項","blocks.websocket.whenConnected":"當連接到 WebSocket 服務器","blocks.websocket.isConnected":"連接成功？","blocks.websocket.whenConnectionErrors":"當連接發生錯誤","blocks.websocket.isConnectionErrored":"連接發生錯誤？","blocks.websocket.whenConnectionCloses":"當連接關閉","blocks.websocket.isConnectionClosed":"連接關閉？","blocks.websocket.closeConnection":"關閉連接"}};var w="./assets/icon-7wq3bbh4.svg";import{jsx as E}from"preact/jsx-runtime";g(u);var U={icon:w,name:E(C,{id:"blocks.websocket.name",defaultMessage:"WebSocket"}),files:[{name:"websocket",type:"text/x-python",uri:p},{name:"_aiohttp/__init__",type:"text/x-python",uri:h},{name:"_aiohttp/aiohttp_ws",type:"text/x-python",uri:_}],emulator:l,blocks:f};export{U as default};
