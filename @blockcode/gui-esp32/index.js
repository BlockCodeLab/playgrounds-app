import{addLocalesMessages as Ye}from"@blockcode/core";var ne={"esp32.menubar.device":"ESP32","esp32.menubar.device.esp32":"ESP32","esp32.menubar.device.esp32s3":"ESP32-S3","esp32.menubar.device.esp32c3":"ESP32-C3","esp32.menubar.device.esp32c6":"ESP32-C6","esp32.menubar.device.esp32IotBoard":"ESP32 IOT Board","esp32.menubar.device.sync":"Sync program","esp32.menubar.device.download":"Download program via USB","esp32.menubar.device.downloadBle":"Download program via Bluetooth","esp32.menubar.device.iotboardFirmware":"Restore IOT Board firmware","esp32.menubar.device.erasing":"Erasing...","esp32.menubar.device.restoring":"Firmware restoring...{progress}%","esp32.menubar.device.recovering":"Recovering...","esp32.menubar.device.restoreDone":"Firmware resotre completed! Now press RESET key","esp32.menubar.device.caching":"Caching latest firmware...","esp32.blocks.displayMatrix":"display %1","esp32.blocks.clearDisplay":"clear display","esp32.blocks.wait":"wait %1 milliseconds","esp32.blocks.break":"break","esp32.blocks.continue":"continue","esp32.blocks.elseif":"else if %1 then","esp32.blocks.else":"else","esp32.blocks.runtime":"run time %1","esp32.blocks.runtimeMilliseconds":"milliseconds","esp32.blocks.runtimeSeconds":"seconds","esp32.blocks.dataConvert":"convert %1 to %2","esp32.blocks.dataConvert.int":"int","esp32.blocks.dataConvert.float":"float","esp32.blocks.dataConvert.string":"str","esp32.blocks.dataConvert.list":"list","esp32.blocks.dataLengthOf":"length of %1","esp32.blocks.dataConstrain":"constrain %1 between %2 to %3","esp32.blocks.dataMap":"map %1 from %2 - %3 to %4 - %5","esp32.blocks.whenstart":"when {name} start","esp32.blocks.timerset":"set timer # %1 per %2 milliseconds","esp32.blocks.timeroff":"stop timer # %1","esp32.blocks.operatorLarger":"larger of %1 and %2","esp32.blocks.operatorSmaller":"smaller of %1 and %2","esp32.blocks.pin":"Pins","esp32.blocks.setmode":"set pin %1 mode to %2","esp32.blocks.inputMode":"input","esp32.blocks.ouputMode":"output","esp32.blocks.inputPullUpMode":"input pull-up","esp32.blocks.inputPullDownMode":"input pull-down","esp32.blocks.setdigital":"set digital pin %1 to %2","esp32.blocks.digitalHigh":"high","esp32.blocks.digitalLow":"low","esp32.blocks.setpwmfreq":"set pwm pin %1 frequency to %2 Hz","esp32.blocks.setpwm":"set pwm pin %1 to %2","esp32.blocks.setanalog":"set analog pin %1 to %2","esp32.blocks.isDigitalHigh":"digital pin %1 is high?","esp32.blocks.analogValue":"analog pin %1 value","esp32.blocks.attachinterrupt":"attach pin %1 interrupt to %2","esp32.blocks.interruptRising":"rising","esp32.blocks.interruptFalling":"falling","esp32.blocks.interruptChange":"change","esp32.blocks.interruptHigh":"high","esp32.blocks.interruptLow":"low","esp32.blocks.detachinterrupt":"detach pin %1 interrupt","esp32.blocks.network":"Network","esp32.blocks.protocols":"Protocols","esp32.blocks.serial":"Serial","esp32.blocks.serialBaudrate":"set baudrate to %1","esp32.blocks.serialTimeout":"set timeout to %1 milliseconds","esp32.blocks.serialPrint":"print %1 with %2","esp32.blocks.serialPrintWarp":"warp","esp32.blocks.serialPrintNoWarp":"no-warp","esp32.blocks.serialPrintHEX":"hex","esp32.blocks.serialPrintNumber":"print %1","esp32.blocks.serialAvailable":"available data?","esp32.blocks.serialAvailableLength":"available data length","esp32.blocks.serialReadString":"read a string","esp32.blocks.serialReadStringUntil":"read a string until %1","esp32.blocks.serialReadParse":"read a %1 number","esp32.blocks.serialReadParseInteger":"int","esp32.blocks.serialReadParseFloat":"float","esp32.blocks.serialRead":"read a byte","esp32.blocks.serialReadBytes":"read %1 bytes","esp32.blocks.text":"Text","esp32.blocks.textEquals":"%1 equals %2 (not case-sensitive)?","esp32.blocks.textRemove":"remove letters from %1 to %2 of %3","esp32.blocks.textReplace":"replace %1 of %2 with %3","esp32.blocks.textReplaceLetter":"replace letter %1 of %2 with %3","esp32.blocks.textSubstring":"substring of %1 from %2 to %3","esp32.blocks.textWith":"%1 %2 with %3?","esp32.blocks.textStartsWith":"starts","esp32.blocks.textEndsWith":"ends","esp32.blocks.textCase":"get %1 of %2","esp32.blocks.textLowerCase":"lower-case","esp32.blocks.textUpperCase":"upper-case","esp32.blocks.textTrim":"remove %1 leading and trailing whitespace","esp32.blocks.textConvert":"convert %1 to %2","esp32.blocks.textConvertFrom":"convert %1 to String","esp32.blocks.connectWifi":"connect wi-fi ssid: %1 password: %2","esp32.blocks.disconnectWifi":"disconnect wi-fi","esp32.blocks.isWifiConnected":"wi-fi is connected?","esp32.blocks.wifiScan":"start scan wi-fi","esp32.blocks.wifiItem":"%2 of item %1 of available wi-fi","esp32.blocks.wifiItemSsid":"ssid","esp32.blocks.wifiItemMac":"mac","esp32.blocks.wifiItemRssi":"rssi","esp32.blocks.wifiItemSecurity":"security","esp32.blocks.wifiCounts":"available wi-fi counts","esp32.blocks.startap":"start ap ssid: %1","esp32.blocks.stopap":"stop ap","esp32.blocks.espnowSend":"send esp-now message %1 to %2","esp32.blocks.espnowRecv":"wait for esp-now incoming","esp32.blocks.espnowMsg":"%1 of incoming","esp32.blocks.espnowMsgText":"message","esp32.blocks.espnowMsgMac":"mac","esp32.blocks.espnowRepeat":"repeat wait for esp-now incoming","esp32.blocks.spiInit":"initialize SPI %1 freq:%2Hz","esp32.blocks.spiHSPI":"HSPI","esp32.blocks.spiVSPI":"VSPI","esp32.blocks.spiWrite":"SPI %1 write %2","esp32.blocks.spiRead":"SPI %1 read %2 bytes","esp32.blocks.i2cInit":"initialize I2C SDA:%1 SCL:%2 freq:%3Hz","esp32.blocks.i2cScan":"I2C scan devices","esp32.blocks.i2cWrite":"I2C write to %1:%2","esp32.blocks.i2cRead":"I2C read from %1 :%2 bytes","esp32.blocks.i2sInit":"initialize I2S BCK:%1 WS:%2 DATA:%3 rate:%4Hz","esp32.blocks.i2sPlay":"I2S play %1"};var re={"esp32.menubar.device":"ESP32","esp32.menubar.device.esp32":"ESP32","esp32.menubar.device.esp32s3":"ESP32-S3","esp32.menubar.device.esp32c3":"ESP32-C3","esp32.menubar.device.esp32c6":"ESP32-C6","esp32.menubar.device.esp32IotBoard":"ESP32 IOT Board","esp32.menubar.device.sync":"同步程序","esp32.menubar.device.download":"通过 USB 下载程序","esp32.menubar.device.downloadBle":"通过蓝牙下载程序","esp32.menubar.device.iotboardFirmware":"恢复 IOT Borad 出厂固件","esp32.menubar.device.erasing":"正在清除…","esp32.menubar.device.restoring":"正在恢复固件…{progress}%","esp32.menubar.device.recovering":"恢复设备…","esp32.menubar.device.restoreDone":"恢复固件完成，请按下 RESET 键。","esp32.menubar.device.caching":"正在缓存最新固件…","esp32.blocks.displayMatrix":"显示 %1","esp32.blocks.clearDisplay":"清除显示","esp32.blocks.wait":"等待 %1 毫秒","esp32.blocks.break":"跳出重复执行","esp32.blocks.continue":"跳到下一次执行","esp32.blocks.elseif":"否则，如果 %1 那么","esp32.blocks.else":"否则","esp32.blocks.runtime":"运行时长 %1","esp32.blocks.runtimeMilliseconds":"毫秒","esp32.blocks.runtimeSeconds":"秒","esp32.blocks.dataConvert":"将 %1 类型转为 %2","esp32.blocks.dataConvert.int":"整数","esp32.blocks.dataConvert.float":"浮点数","esp32.blocks.dataConvert.string":"字符串","esp32.blocks.dataConvert.list":"列表","esp32.blocks.dataLengthOf":"%1 长度","esp32.blocks.dataConstrain":"约束 %1 在 %2 和 %3 之间","esp32.blocks.dataMap":"映射 %1 从 %2 - %3 到 %4 - %5","esp32.blocks.whenstart":"当 {name} 启动","esp32.blocks.timerset":"将定时器 # %1 间隔设为每 %2 毫秒","esp32.blocks.timeroff":"关闭定时器 # %1","esp32.blocks.operatorLarger":"%1 和 %2 之中最大","esp32.blocks.operatorSmaller":"%1 和 %2 之中最小","esp32.blocks.pin":"引脚","esp32.blocks.setmode":"将引脚 %1 设为 %2 模式","esp32.blocks.inputMode":"输入","esp32.blocks.ouputMode":"输出","esp32.blocks.inputPullUpMode":"上拉输入","esp32.blocks.inputPullDownMode":"下拉输入","esp32.blocks.setdigital":"将数字引脚 %1 设为 %2","esp32.blocks.digitalHigh":"高电平","esp32.blocks.digitalLow":"低电平","esp32.blocks.setpwmfreq":"将 PWM 引脚 %1 频率设为 %2","esp32.blocks.setpwm":"将 PWM 引脚 %1 设为 %2","esp32.blocks.setanalog":"将模拟引脚 %1 设为 %2","esp32.blocks.isDigitalHigh":"数字引脚 %1 是高电平？","esp32.blocks.analogValue":"模拟引脚 %1 的值","esp32.blocks.attachinterrupt":"将引脚 %1 中断模式设为 %2","esp32.blocks.interruptRising":"电平上升","esp32.blocks.interruptFalling":"电平下降","esp32.blocks.interruptChange":"电平改变","esp32.blocks.interruptHigh":"高电平","esp32.blocks.interruptLow":"低电平","esp32.blocks.detachinterrupt":"取消引脚 %1 中断","esp32.blocks.network":"网络通讯","esp32.blocks.protocols":"数据协议","esp32.blocks.serial":"串口","esp32.blocks.serialBaudrate":"将波特率设为 %1","esp32.blocks.serialTimeout":"将超时设为 %1 毫秒","esp32.blocks.serialPrint":"用 %2 模式打印 %1","esp32.blocks.serialPrintWarp":"换行","esp32.blocks.serialPrintNoWarp":"不换行","esp32.blocks.serialPrintHEX":"16进制","esp32.blocks.serialPrintNumber":"打印 %1","esp32.blocks.serialAvailable":"存在可读取数据?","esp32.blocks.serialAvailableLength":"可读取数据长度","esp32.blocks.serialReadString":"读取文本","esp32.blocks.serialReadStringUntil":"读取文本直到 %1","esp32.blocks.serialReadParse":"读取 %1","esp32.blocks.serialReadParseInteger":"整数","esp32.blocks.serialReadParseFloat":"浮点数","esp32.blocks.serialRead":"读取 1 个字节","esp32.blocks.serialReadBytes":"读取 %1 个字节","esp32.blocks.text":"文本","esp32.blocks.textEquals":"%1 和 %2 相同（忽视大小写）？","esp32.blocks.textRemove":"删除 %3 从第 %1 个到第 %2 个字符","esp32.blocks.textReplace":"将 %2 中的 %1 替换为 %3","esp32.blocks.textReplaceLetter":"将 %2 中的第 %1 个字符替换为 %3","esp32.blocks.textSubstring":"截取 %1 从第 %2 个到第 %3 个字符","esp32.blocks.textWith":"%1 %2 %3?","esp32.blocks.textStartsWith":"开始于","esp32.blocks.textEndsWith":"结束于","esp32.blocks.textCase":"将 %2 字母转为 %1","esp32.blocks.textLowerCase":"小写","esp32.blocks.textUpperCase":"大写","esp32.blocks.textTrim":"清除 %1 前后空白字符","esp32.blocks.textConvert":"将 %1 转为 %2","esp32.blocks.textConvertFrom":"将 %1 转为文本","esp32.blocks.connectWifi":"连接 Wi-Fi 网络 SSID: %1 密码: %2","esp32.blocks.disconnectWifi":"断开 Wi-Fi 网络","esp32.blocks.isWifiConnected":"Wi-Fi 网络已连接？","esp32.blocks.wifiScan":"开始扫描 Wi-Fi","esp32.blocks.wifiItem":"第 %1 个可用 Wi-Fi 的 %2","esp32.blocks.wifiItemSsid":"SSID","esp32.blocks.wifiItemMac":"MAC","esp32.blocks.wifiItemRssi":"RSSI","esp32.blocks.wifiItemSecurity":"加密类型","esp32.blocks.wifiCounts":"可用 Wi-Fi 数量","esp32.blocks.startap":"开启热点 SSID: %1","esp32.blocks.stopap":"关闭热点","esp32.blocks.espnowSend":"发送 ESP-Now 消息 %1 到 %2","esp32.blocks.espnowRecv":"等待 ESP-Now 接收消息","esp32.blocks.espnowMsg":"接受到 %1","esp32.blocks.espnowMsgText":"消息","esp32.blocks.espnowMsgMac":"MAC","esp32.blocks.espnowRepeat":"重复等待 ESP-Now 接收消息","esp32.blocks.spiInit":"初始化SPI %1 频率:%2Hz","esp32.blocks.spiHSPI":"HSPI","esp32.blocks.spiVSPI":"VSPI","esp32.blocks.spiWrite":"SPI %1 写入 %2","esp32.blocks.spiRead":"SPI %1 读取 %2 字节","esp32.blocks.i2cInit":"初始化I2C SDA:%1 SCL:%2 频率:%3Hz","esp32.blocks.i2cScan":"I2C扫描设备","esp32.blocks.i2cWrite":"I2C写入到 %1:%2","esp32.blocks.i2cRead":"I2C从 %1 读取 %2 字节","esp32.blocks.i2sInit":"初始化I2S BCK:%1 WS:%2 DATA:%3 速率:%4Hz","esp32.blocks.i2sPlay":"I2S播放 %1"};var ae={"esp32.menubar.device":"ESP32","esp32.menubar.device.esp32":"ESP32","esp32.menubar.device.esp32s3":"ESP32-S3","esp32.menubar.device.esp32c3":"ESP32-C3","esp32.menubar.device.esp32c6":"ESP32-C6","esp32.menubar.device.esp32IotBoard":"ESP32 IOT Board","esp32.menubar.device.sync":"同步程式","esp32.menubar.device.download":"通過 USB 下載程式","esp32.menubar.device.downloadBle":"通過藍牙下載程式","esp32.menubar.device.iotboardFirmware":"恢復 IOT Borad 出廠固件","esp32.menubar.device.erasing":"正在清除…","esp32.menubar.device.restoring":"正在恢復固件…{progress}%","esp32.menubar.device.recovering":"恢復設備…","esp32.menubar.device.restoreDone":"恢復固件完成，請按下 RESET 鍵。","esp32.menubar.device.caching":"正在緩存最新固件…","esp32.blocks.classicEventsLabel":"经典事件積木請從「編輯」菜單開啟。","esp32.blocks.displayMatrix":"顯示圖示 %1","esp32.blocks.clearDisplay":"清空畫面","esp32.blocks.wait":"等待 %1 毫秒","esp32.blocks.break":"跳出重複","esp32.blocks.continue":"跳到下一次","esp32.blocks.elseif":"否則，如果 %1 那麼","esp32.blocks.else":"否則","esp32.blocks.runtime":"運行時長 %1","esp32.blocks.runtimeMilliseconds":"毫秒","esp32.blocks.runtimeSeconds":"秒","esp32.blocks.dataConvert":"將 %1 類型轉為 %2","esp32.blocks.dataConvert.int":"整數","esp32.blocks.dataConvert.float":"浮點數","esp32.blocks.dataConvert.string":"字符串","esp32.blocks.dataConvert.list":"列表","esp32.blocks.dataLengthOf":"%1 長度","esp32.blocks.dataConstrain":"約束 %1 在 %2 和 %3 之間","esp32.blocks.dataMap":"映射 %1 從 %2 - %3 到 %4 - %5","esp32.blocks.whenstart":"當 {name} 開始","esp32.blocks.timerset":"將定時器 # %1 間隔設為每 %2 毫秒","esp32.blocks.timeroff":"關閉定時器 # %1","esp32.blocks.operatorLarger":"%1 和 %2 之中最大","esp32.blocks.operatorSmaller":"%1 和 %2 之中最小","esp32.blocks.pin":"引腳","esp32.blocks.setmode":"將引腳 %1 設為 %2 模式","esp32.blocks.inputMode":"輸入","esp32.blocks.ouputMode":"輸出","esp32.blocks.inputPullUpMode":"上拉輸入","esp32.blocks.inputPullDownMode":"下拉輸入","esp32.blocks.setdigital":"將數字引腳 %1 設為 %2","esp32.blocks.digitalHigh":"高電平","esp32.blocks.digitalLow":"低電平","esp32.blocks.setpwmfreq":"將 PWM 引腳 %1 頻率設為 %2","esp32.blocks.setpwm":"將 PWM 引腳 %1 設為 %2","esp32.blocks.setanalog":"將模擬引腳 %1 設為 %2","esp32.blocks.isDigitalHigh":"數字引腳 %1 是高電平？","esp32.blocks.analogValue":"模擬引腳 %1 的值","esp32.blocks.attachinterrupt":"將引腳 %1 中斷模式設為 %2","esp32.blocks.interruptRising":"電平上升","esp32.blocks.interruptFalling":"電平下降","esp32.blocks.interruptChange":"電平改變","esp32.blocks.interruptHigh":"高電平","esp32.blocks.interruptLow":"低電平","esp32.blocks.detachinterrupt":"取消引腳 %1 中斷","esp32.blocks.network":"網絡通訊","esp32.blocks.protocols":"數據協議","esp32.blocks.serial":"串口","esp32.blocks.serialBaudrate":"將波特率設為 %1","esp32.blocks.serialTimeout":"將超時設為 %1 毫秒","esp32.blocks.serialPrint":"用 %2 模式打印 %1","esp32.blocks.serialPrintWarp":"換行","esp32.blocks.serialPrintNoWarp":"不換行","esp32.blocks.serialPrintHEX":"16進制","esp32.blocks.serialPrintNumber":"打印 %1","esp32.blocks.serialAvailable":"存在可讀取數據?","esp32.blocks.serialAvailableLength":"可讀取數據長度","esp32.blocks.serialReadString":"讀取文本","esp32.blocks.serialReadStringUntil":"讀取文本直到 %1","esp32.blocks.serialReadParse":"讀取 %1","esp32.blocks.serialReadParseInteger":"整數","esp32.blocks.serialReadParseFloat":"浮點數","esp32.blocks.serialRead":"讀取 1 個字節","esp32.blocks.serialReadBytes":"讀取 %1 個字節","esp32.blocks.text":"文本","esp32.blocks.textEquals":"%1 和 %2 相同（忽視大小寫）？","esp32.blocks.textRemove":"刪除 %3 從第 %1 個到第 %2 個字符","esp32.blocks.textReplace":"將 %2 中的 %1 替換為 %3","esp32.blocks.textReplaceLetter":"將 %2 中的第 %1 個字符替換為 %3","esp32.blocks.textSubstring":"截取 %1 從第 %2 個到第 %3 個字符","esp32.blocks.textWith":"%1 %2 %3?","esp32.blocks.textStartsWith":"開始於","esp32.blocks.textEndsWith":"結束於","esp32.blocks.textCase":"將 %2 字母轉為 %1","esp32.blocks.textLowerCase":"小寫","esp32.blocks.textUpperCase":"大寫","esp32.blocks.textTrim":"清除 %1 前後空白字符","esp32.blocks.textConvert":"將 %1 轉為 %2","esp32.blocks.textConvertFrom":"將 %1 轉為文本","esp32.blocks.connectWifi":"連接 Wi-Fi 網絡 SSID: %1 密碼: %2","esp32.blocks.disconnectWifi":"斷開 Wi-Fi 網絡","esp32.blocks.isWifiConnected":"Wi-Fi 網絡已連接？","esp32.blocks.wifiScan":"開始掃描 Wi-Fi","esp32.blocks.wifiItem":"第 %1 個可用 Wi-Fi 的 %2","esp32.blocks.wifiItemSsid":"SSID","esp32.blocks.wifiItemMac":"MAC","esp32.blocks.wifiItemRssi":"RSSI","esp32.blocks.wifiItemSecurity":"加密類型","esp32.blocks.wifiCounts":"可用 Wi-Fi 數量","esp32.blocks.startap":"開啟 AP SSID: %1","esp32.blocks.stopap":"關閉 AP","esp32.blocks.espnowSend":"發送 ESP-Now 消息 %1 到 %2","esp32.blocks.espnowRecv":"等待 ESP-Now 接收消息","esp32.blocks.espnowMsg":"接受到 %1","esp32.blocks.espnowMsgText":"消息","esp32.blocks.espnowMsgMac":"MAC","esp32.blocks.espnowRepeat":"重複等待 ESP-Now 接收消息","esp32.blocks.spiInit":"初始化SPI %1 頻率:%2Hz","esp32.blocks.spiHSPI":"HSPI","esp32.blocks.spiVSPI":"VSPI","esp32.blocks.spiWrite":"SPI %1 寫入 %2","esp32.blocks.spiRead":"SPI %1 讀取 %2 位元組","esp32.blocks.i2cInit":"初始化I2C SDA:%1 SCL:%2 頻率:%3Hz","esp32.blocks.i2cScan":"I2C掃描設備","esp32.blocks.i2cWrite":"I2C寫入到 %1:%2","esp32.blocks.i2cRead":"I2C從 %1 讀取 %2 位元組","esp32.blocks.i2sInit":"初始化I2S BCK:%1 WS:%2 DATA:%3 速率:%4Hz","esp32.blocks.i2sPlay":"I2S播放 %1"};Ye({en:ne,"zh-Hans":re,"zh-Hant":ae});import{svgAsDataUri as vt}from"@blockcode/utils";import{ScratchBlocks as D,blocksTab as Ct,CodeReview as At}from"@blockcode/blocks";import{codeTab as Dt,terminalTab as Pt}from"@blockcode/code";import{useCallback as Ne}from"preact/hooks";import{useAppContext as Qe,useProjectContext as Ze}from"@blockcode/core";import{MicroPythonGenerator as Je,BlocksEditor as je}from"@blockcode/blocks";import{translate as c,themeColors as F}from"@blockcode/core";import{keyMirror as ze}from"@blockcode/utils";var a=ze({ESP32:null,ESP32S2:null,ESP32S3:null,ESP32C3:null,ESP32C5:null,ESP32C6:null,ESP32_IOT_BOARD:null});var pe=(e)=>{let t=e===a.ESP32S3?"ESP32S3_PINS":"ESP32_PINS",i=e===a.ESP32S3?"ESP32S3_ADC_PINS":"ESP32_ADC_PINS";return{id:"pin",name:c("esp32.blocks.pin","Pins"),themeColor:F.blocks.motion.primary,inputColor:F.blocks.motion.secondary,otherColor:F.blocks.motion.tertiary,order:0,blocks:[{id:"setmode",text:c("esp32.blocks.setmode","set pin %1 mode to %2"),inputs:{PIN:{menu:t},MODE:{menu:[[c("esp32.blocks.ouputMode","output"),"OUTPUT"],[c("esp32.blocks.inputMode","input"),"INPUT"],[c("esp32.blocks.inputPullUpMode","input pull-up"),"INPUT_PULLUP"],[c("esp32.blocks.inputPullDownMode","input pull-down"),"INPUT_PULLDOWN"]]}},mpy(s){let o=s.getFieldValue("PIN")||0,n=`pin_${o}`,r=s.getFieldValue("MODE")||"OUTPUT";this.definitions_.import_pin="from machine import Pin";let p="";if(r==="INPUT")p=`${n} = Pin(${o}, Pin.IN)`;else if(r==="INPUT_PULLUP")p=`${n} = Pin(${o}, Pin.IN, Pin.PULL_UP)`;else if(r==="INPUT_PULLDOWN")p=`${n} = Pin(${o}, Pin.IN, Pin.PULL_DOWN)`;else p=`${n} = Pin(${o}, Pin.OUT)`;return this.definitions_[n]=p,""}},"---",{id:"setdigital",text:c("esp32.blocks.setdigital","set digital pin %1 to %2"),inputs:{PIN:{menu:t},VALUE:{inputMode:!0,type:"integer",defaultValue:"1",menu:[[c("esp32.blocks.digitalHigh","high"),"1"],[c("esp32.blocks.digitalLow","low"),"0"]]}},mpy(s){let o=s.getFieldValue("PIN")||0,n=`pin_${o}`,r=this.valueToCode(s,"VALUE",this.ORDER_NONE);return this.definitions_.import_pin="from machine import Pin",this.definitions_[n]=this.definitions_[n]??`${n} = Pin(${o}, Pin.OUT)`,`${n}.value(${r})
`}},...e===a.ESP32_IOT_BOARD||e===a.ESP32?[{id:"setDAC",text:c("esp32.blocks.setanalog","set analog pin %1 to %2"),inputs:{PIN:{menu:"ESP32_DAC_PINS"},VALUE:{shadow:"slider255"}},mpy(s){let o=s.getFieldValue("PIN")||0,n=this.valueToCode(s,"VALUE",this.ORDER_NONE);return this.definitions_.import_pin="from machine import Pin",this.definitions_.import_dac="from machine import DAC",this.definitions_[`dac_${o}`]=`dac_${o} = DAC(Pin(${o}))`,`dac_${o}.write(${n})
`}},{id:"slider255",inline:!0,output:"integer",inputs:{VALUE:{type:"slider",min:0,max:255,step:1,defaultValue:128}},mpy(s){return[s.getFieldValue("VALUE")||0,this.ORDER_ATOMIC]}}]:[],{id:"digital",text:c("esp32.blocks.isDigitalHigh","digital pin %1 is high?"),output:"boolean",inputs:{PIN:{menu:t}},mpy(s){let o=s.getFieldValue("PIN")||0,n=`pin_${o}`;return this.definitions_.import_pin="from machine import Pin",this.definitions_[n]=`${n} = Pin(${o}, Pin.IN)`,[`(${n}.value() == 1)`,this.ORDER_RELATIONAL]}},{id:"analog",text:c("esp32.blocks.analogValue","analog pin %1 value"),output:"integer",inputs:{PIN:{menu:i}},mpy(s){let o=s.getFieldValue("PIN")||0;return this.definitions_.import_adc="from machine import ADC",this.definitions_[`adc_${o}`]=`adc_${o} = ADC(Pin(${o}))`,[`adc_${o}.read()`,this.ORD_FUNCTION_CALL]}},"---",{id:"setPWMFreq",text:c("esp32.blocks.setpwmfreq","set pwm pin %1 frequency to %2 Hz"),inputs:{PIN:{menu:t},FREQ:{type:"integer",defaultValue:"1000"}},mpy(s){let o=s.getFieldValue("PIN")||0,n=this.valueToCode(s,"FREQ",this.ORDER_NONE);return this.definitions_.import_pin="from machine import Pin",this.definitions_.import_pwm="from machine import PWM",this.definitions_[`pwm_${o}`]=`pwm_${o} = PWM(Pin(${o}), freq=1000)`,`pwm_${o}.freq(${n})
`}},{id:"setPWM",text:c("esp32.blocks.setpwm","set pwm pin %1 to %2"),inputs:{PIN:{menu:t},VALUE:{shadow:"slider1023"}},mpy(s){let o=s.getFieldValue("PIN")||0,n=this.valueToCode(s,"VALUE",this.ORDER_NONE);return this.definitions_.import_pin="from machine import Pin",this.definitions_.import_pwm="from machine import PWM",this.definitions_[`pwm_${o}`]=`pwm_${o} = PWM(Pin(${o}), freq=1000)`,`pwm_${o}.duty_u16(${n} * 64)
`}},{id:"slider1023",inline:!0,output:"integer",inputs:{VALUE:{type:"slider",min:0,max:1023,step:1,defaultValue:512}},mpy(s){return[s.getFieldValue("VALUE")||0,this.ORDER_ATOMIC]}},"---",{id:"attachinterrupt",text:c("esp32.blocks.attachinterrupt","attach pin %1 interrupt to %2"),substack:!0,inputs:{PIN:{menu:t},INTERRUPT:{menu:[[c("esp32.blocks.interruptRising","rising"),"RISING"],[c("esp32.blocks.interruptFalling","falling"),"FALLING"],[c("esp32.blocks.interruptChange","change"),"CHANGE"],[c("esp32.blocks.interruptHigh","high"),"HIGH"],[c("esp32.blocks.interruptLow","low"),"LOW"]]}},mpy(s){let o=s.getFieldValue("PIN")||0,n=`pin_${o}`,r=`interrupt_${o}_flag`,p=s.getFieldValue("INTERRUPT")||"RISING";this.definitions_.import_pin="from machine import Pin",this.definitions_[n]=this.definitions_[n]??`${n} = Pin(${o}, Pin.IN)`,this.definitions_[r]=`${r} = asyncio.ThreadSafeFlag()`;let m=this.statementToCode(s,"SUBSTACK")||this.PASS,l="";l+=`while True:
`,l+=`${this.INDENT}await ${r}.wait()
`,l+=m,m=this.prefixLines(l,this.INDENT),m=this.addEventTrap(m,s.id),l=`@_tasks__.append
`,l+=m,this.definitions_[`interrupt_${o}`]=l;let He={RISING:"Pin.IRQ_RISING",FALLING:"Pin.IRQ_FALLING",CHANGE:"Pin.IRQ_RISING | Pin.IRQ_FALLING",HIGH:"Pin.IRQ_HIGH_LEVEL",LOW:"Pin.IRQ_LOW_LEVEL"}[p]||"Pin.IRQ_RISING";return`${n}.irq(trigger=${He}, handler=lambda _: ${r}.set())
`}},{id:"detachinterrupt",text:c("esp32.blocks.detachinterrupt","detach pin %1 interrupt"),inputs:{PIN:{menu:t}},mpy(s){return`pin_${s.getFieldValue("PIN")||0}.irq(handler=None)
`}}],menus:{ESP32_PINS:{items:[["0","0"],["1","1"],["2","2"],["3","3"],["4","4"],["5","5"],["6","6"],["7","7"],["8","8"],["9","9"],["10","10"],["11","11"],["12","12"],["13","13"],["14","14"],["15","15"],["16","16"],["17","17"],["18","18"],["19","19"],["21","21"],["22","22"],["23","23"],["25","25"],["26","26"],["27","27"],["32","32"],["33","33"],["34","34"],["35","35"],["36","36"],["39","39"]]},ESP32S3_PINS:{items:[["0","0"],["1","1"],["2","2"],["3","3"],["4","4"],["5","5"],["6","6"],["7","7"],["8","8"],["9","9"],["10","10"],["11","11"],["12","12"],["13","13"],["14","14"],["15","15"],["16","16"],["17","17"],["18","18"],["19","19"],["20","20"],["21","21"],["35","35"],["36","36"],["37","37"],["38","38"],["39","39"],["40","40"],["41","41"],["42","42"],["43","43"],["44","44"],["45","45"],["46","46"],["47","47"],["48","48"]]},ESP32_ADC_PINS:{items:[["0","0"],["2","2"],["4","4"],["12","12"],["13","13"],["14","14"],["15","15"],["25","25"],["26","26"],["27","27"],["32","32"],["33","33"],["34","34"],["35","35"],["36","36"],["37","37"],["38","38"],["39","39"]]},ESP32S3_ADC_PINS:{items:[["1","1"],["2","2"],["3","3"],["4","4"],["5","5"],["6","6"],["7","7"],["8","8"],["9","9"],["10","10"],["11","11"],["12","12"],["13","13"],["14","14"],["15","15"],["16","16"],["17","17"],["18","18"],["19","19"],["20","20"]]},ESP32_DAC_PINS:{items:[["17","17"],["18","18"]]}}}};import{translate as R,themeColors as U}from"@blockcode/core";import{ScratchBlocks as P}from"@blockcode/blocks";var le=()=>({id:"text",name:R("esp32.blocks.text","Text"),themeColor:U.blocks.looks.primary,inputColor:U.blocks.looks.secondary,otherColor:U.blocks.looks.tertiary,order:1,blocks:[{id:"join",text:P.Msg.OPERATORS_JOIN,output:"string",inputs:{STRING1:{type:"string",defaultValue:"hello"},STRING2:{type:"string",defaultValue:"esp32"}},mpy(e){let t=this.valueToCode(e,"STRING1",this.ORDER_NONE),i=this.valueToCode(e,"STRING2",this.ORDER_NONE);return[`(${t} + ${i})`,this.ORDER_ADDITION]}},{id:"letter_of",text:P.Msg.OPERATORS_LETTEROF,output:"string",inputs:{LETTER:{type:"integer",defaultValue:1},STRING:{type:"string",defaultValue:"esp32"}},mpy(e){let t=this.getAdjusted(e,"LETTER");return[`${this.valueToCode(e,"STRING",this.ORDER_NONE)}[${t}]`,this.ORDER_FUNCTION_CALL]}},{id:"length",text:P.Msg.OPERATORS_LENGTH,output:"number",inputs:{STRING:{type:"string",defaultValue:"esp32"}},mpy(e){return[`len(${this.valueToCode(e,"STRING",this.ORDER_NONE)})`,this.ORDER_FUNCTION_CALL]}},{id:"contains",text:P.Msg.OPERATORS_CONTAINS,output:"boolean",inputs:{STRING1:{type:"string",defaultValue:"esp32"},STRING2:{type:"string",defaultValue:"e"}},mpy(e){let t=this.valueToCode(e,"STRING1",this.ORDER_NONE);return[`(${this.valueToCode(e,"STRING2",this.ORDER_NONE)} in ${t})`,this.ORDER_EQUALITY]}},{id:"equals",text:R("esp32.blocks.textEquals","%1 equals %2 (not case-sensitive)?"),output:"boolean",inputs:{STRING1:{type:"string",defaultValue:"esp32"},STRING2:{type:"string",defaultValue:"ESP32"}},mpy(e){let t=this.valueToCode(e,"STRING1",this.ORDER_NONE),i=this.valueToCode(e,"STRING2",this.ORDER_NONE);return[`${t}.lower() == ${i}.lower()`,this.ORDER_EQUALITY]}},"---",{id:"remove",text:R("esp32.blocks.textRemove","remove letters from %1 to %2 of %3"),inputs:{FROM:{type:"integer",defaultValue:1},TO:{type:"integer",defaultValue:2},STRING:{type:"string",defaultValue:"esp32"}},mpy(e){let t=this.getAdjusted(e,"FROM"),i=this.valueToCode(e,"TO",this.ORDER_NONE),s=this.valueToCode(e,"STRING",this.ORDER_NONE);return`${s}[:${t}] + ${s}[${i}:]
`}},{id:"replace",text:R("esp32.blocks.textReplace","replace %1 of %2 with %3"),inputs:{STRING1:{type:"string",defaultValue:"a"},STRING2:{type:"string",defaultValue:"esp32"},STRING3:{type:"string",defaultValue:"The A"}},mpy(e){let t=this.valueToCode(e,"STRING1",this.ORDER_NONE),i=this.valueToCode(e,"STRING2",this.ORDER_NONE),s=this.valueToCode(e,"STRING3",this.ORDER_NONE);return`${i}.replace(${t}, ${s})
`}},{id:"replace_letter",text:R("esp32.blocks.textReplaceLetter","replace letter %1 of %2 with %3"),inputs:{INDEX:{type:"integer",defaultValue:1},STRING:{type:"string",defaultValue:"esp32"},LETTER:{type:"string",defaultValue:"A"}},mpy(e){let t=this.getAdjusted(e,"INDEX"),i=this.valueToCode(e,"STRING",this.ORDER_NONE),s=this.valueToCode(e,"LETTER",this.ORDER_NONE);return`${i}[:${t}] + ${s} + ${i}[${t+1}:]
`}},{id:"substring",text:R("esp32.blocks.textSubstring","substring of %1 from %2 to %3"),output:"string",inputs:{STRING:{type:"string",defaultValue:"esp32"},FROM:{type:"integer",defaultValue:5},TO:{type:"integer",defaultValue:7}},mpy(e){let t=this.getAdjusted(e,"FROM"),i=this.valueToCode(e,"TO",this.ORDER_NONE);return[`${this.valueToCode(e,"STRING",this.ORDER_NONE)}[${t}:${i}]`,this.ORDER_FUNCTION_CALL]}},{id:"with",text:R("esp32.blocks.textWith","%1 %2 with %3 ?"),output:"boolean",inputs:{STRING1:{type:"string",defaultValue:"esp32"},WITH:{type:"string",menu:[[R("esp32.blocks.textStartsWith","starts"),"START"],[R("esp32.blocks.textEndsWith","ends"),"END"]]},STRING2:{type:"string",defaultValue:"a"}},mpy(e){let t=this.valueToCode(e,"STRING1",this.ORDER_NONE),i=this.valueToCode(e,"STRING2",this.ORDER_NONE),o=(e.getFieldValue("WITH")||"START")==="START"?"startswith":"endswith";return[`${t}.${o}(${i})`,this.ORDER_FUNCTION_CALL]}},"---",{id:"case",text:R("esp32.blocks.textCase","get %1 case of %2"),inputs:{WITH:{menu:[[R("esp32.blocks.textLowerCase","lower"),"LOWER"],[R("esp32.blocks.textUpperCase","upper"),"UPPER"]]},STRING:{type:"string",defaultValue:"ESP32"}},mpy(e){let t=e.getFieldValue("WITH")||"LOWER";return`${this.valueToCode(e,"STRING",this.ORDER_NONE)}.${t==="LOWER"?"lower":"upper"}()
`}},{id:"trim",text:R("esp32.blocks.textTrim","remove %1 leading and trailing whitespace"),inputs:{STRING:{type:"string",defaultValue:"esp32"}},mpy(e){return`${this.valueToCode(e,"STRING",this.ORDER_NONE)}.strip()`}},"---",{id:"convert",text:R("esp32.blocks.textConvert","convert %1 to %2"),output:!0,inputs:{STRING:{type:"string",defaultValue:"a"},TYPE:{menu:[[R("esp32.blocks.dataConvert.int","int"),"int"],[R("esp32.blocks.dataConvert.float","float"),"float"],[R("esp32.blocks.dataConvert.list","list"),"list"]]}},mpy(e){let t=this.valueToCode(e,"STRING",this.ORDER_NONE);return[`${e.getFieldValue("TYPE")||"int"}(${t})`,this.ORDER_FUNCTION_CALL]}},{id:"convert_from",text:R("esp32.blocks.textConvertFrom","convert %1 to String"),output:!0,inputs:{NUM:{type:"number",defaultValue:1}},mpy(e){return[`str(${this.valueToCode(e,"NUM",this.ORDER_NONE)})`,this.ORDER_FUNCTION_CALL]}}]});import{translate as h,themeColors as W}from"@blockcode/core";var ce=()=>({id:"serial",name:h("esp32.blocks.serial","Serial"),themeColor:W.blocks.sounds.primary,inputColor:W.blocks.sounds.secondary,otherColor:W.blocks.sounds.tertiary,order:2,blocks:[{id:"baudrate",text:h("esp32.blocks.serialBaudrate","set baudrate to %1"),inputs:{BAUDRATE:{menu:{inputMode:!0,type:"integer",defaultValue:"115200",items:["4800","9600","38400","57600","115200"]}}},mpy(e){let t=this.valueToCode(e,"BAUDRATE",this.ORDER_NONE);return this.definitions_.import_uart="from machine import UART",this.definitions_.uart="uart = UART(0)",`uart.init(${t})
`}},{id:"timeout",text:h("esp32.blocks.serialTimeout","set timeout to %1 milliseconds"),inputs:{TIMEOUT:{type:"integer",defaultValue:1000}},mpy(e){let t=this.valueToCode(e,"TIMEOUT",this.ORDER_NONE);return this.definitions_.import_uart="from machine import UART",this.definitions_.uart="uart = UART(0)",`uart.timeout = ${t} / 1000
`}},"---",{id:"print",text:h("esp32.blocks.serialPrint","print %1 with %2"),inputs:{STRING:{type:"string",defaultValue:"hello"},MODE:{menu:[[h("esp32.blocks.serialPrintWarp","warp"),"WARP"],[h("esp32.blocks.serialPrintNoWarp","no-warp"),"NOWARP"],[h("esp32.blocks.serialPrintHEX","hex"),"HEX"]]}},mpy(e){let t=this.valueToCode(e,"STRING",this.ORDER_NONE),i=e.getFieldValue("MODE")||"WARP";if(this.definitions_.import_uart="from machine import UART",this.definitions_.uart="uart = UART(0)",i==="WARP")return`uart.write(${t} + '\\n')
`;else if(i==="NOWARP")return`uart.write(${t})
`;else if(i==="HEX")return`uart.write(hex(${t}))
`}},{id:"print_number",text:h("esp32.blocks.serialPrintNumber","print %1"),inputs:{NUM:{type:"number",defaultValue:0}},mpy(e){let t=this.valueToCode(e,"NUM",this.ORDER_NONE);return this.definitions_.import_uart="from machine import UART",this.definitions_.uart="uart = UART(0)",`uart.write(str(${t}) + '
')
`}},"---",{id:"available",text:h("esp32.blocks.serialAvailable","available data?"),output:"boolean",mpy(e){return this.definitions_.import_uart="from machine import UART",this.definitions_.uart="uart = UART(0)",["uart.any() > 0",this.ORDER_RELATIONAL]}},{id:"available_length",text:h("esp32.blocks.serialAvailableLength","available data length"),output:"number",mpy(e){return this.definitions_.import_uart="from machine import UART",this.definitions_.uart="uart = UART(0)",["uart.any()",this.ORDER_FUNCTION_CALL]}},"---",{id:"read_string",text:h("esp32.blocks.serialReadString","read a string"),output:"string",mpy(e){return this.definitions_.import_uart="from machine import UART",this.definitions_.uart="uart = UART(0)",["uart.read().decode('utf-8')",this.ORDER_FUNCTION_CALL]}},{id:"read_string_until",text:h("esp32.blocks.serialReadStringUntil","read a string until %1"),output:"string",inputs:{CHAR:{type:"string",defaultValue:"a"}},mpy(e){let t=this.valueToCode(e,"CHAR",this.ORDER_NONE);return this.definitions_.import_uart="from machine import UART",this.definitions_.uart="uart = UART(0)",[`uart.readuntil(${t}).decode('utf-8')`,this.ORDER_FUNCTION_CALL]}},"---",{id:"read_parse",text:h("esp32.blocks.serialReadParse","read a %1 number"),output:"number",inputs:{TYPE:{menu:[[h("esp32.blocks.serialReadParseInteger","int"),"INT"],[h("esp32.blocks.serialReadParseFloat","float"),"FLOAT"]]}},mpy(e){let t=e.getFieldValue("TYPE")||"INT";if(this.definitions_.import_uart="from machine import UART",this.definitions_.uart="uart = UART(0)",t==="INT")return["int(uart.read())",this.ORDER_FUNCTION_CALL];else if(t==="FLOAT")return["float(uart.read())",this.ORDER_FUNCTION_CALL]}},"---",{id:"read",text:h("esp32.blocks.serialRead","read a byte"),output:!0,mpy(e){return this.definitions_.import_uart="from machine import UART",this.definitions_.uart="uart = UART(0)",["uart.read(1)",this.ORDER_FUNCTION_CALL]}},{id:"read_bytes",text:h("esp32.blocks.serialReadBytes","read %1 bytes"),output:!0,inputs:{LEN:{type:"integer",defaultValue:2}},mpy(e){let t=this.valueToCode(e,"LEN",this.ORDER_NONE);return this.definitions_.import_uart="from machine import UART",this.definitions_.uart="uart = UART(0)",[`uart.read(${t})`,this.ORDER_FUNCTION_CALL]}}]});import{translate as f,themeColors as G}from"@blockcode/core";var ue=(e)=>{let t=f("esp32.menubar.device.esp32","ESP32");switch(e){case a.ESP32S3:t=f("esp32.menubar.device.esp32s3","ESP32-S3");break;case a.ESP32C3:t=f("esp32.menubar.device.esp32c3","ESP32-C3");break;case a.ESP32_IOT_BOARD:t=f("esp32.menubar.device.esp32IotBoard","ESP32 IOT Board");break}let i=["1","2","3","4"];return{id:"event",name:"%{BKY_CATEGORY_EVENTS}",themeColor:G.blocks.events.primary,inputColor:G.blocks.events.secondary,otherColor:G.blocks.events.tertiary,blocks:[{id:"whenstart",text:f("esp32.blocks.whenstart","when {name} start",{name:t}),hat:!0,mpy(s){let o=this.statementToCode(s)||this.PASS;o=this.addEventTrap(o,s.id);let n="";return n+=`@_tasks__.append
`,n+=o,n}},"---",{id:"timerset",text:f("esp32.blocks.timerset","set timer # %1 per %2 milliseconds"),substack:!0,inputs:{ID:{menu:i},PERIOD:{type:"integer",defaultValue:500}},mpy(s){let o=this.valueToCode(s,"PERIOD",this.ORDER_NONE)||500,n=parseInt(s.getFieldValue("ID")||"1",10)-1;if(n<0)n=0;let r=`timer_${n}`,p=`period_${n}_flag`;this.definitions_.import_timer="from machine import Timer",this.definitions_[r]=`${r} = Timer(${n})`,this.definitions_[p]=`${p} = asyncio.ThreadSafeFlag()`;let m=this.statementToCode(s,"SUBSTACK")||this.PASS,l="";return l+=`while True:
`,l+=`${this.INDENT}await ${p}.wait()
`,l+=m,m=this.prefixLines(l,this.INDENT),m=this.addEventTrap(m,s.id),l=`@_tasks__.append
`,l+=m,this.definitions_[`period_${n}`]=l,`${r}.init(mode=Timer.PERIODIC, period=${o}, callback=lambda _: ${p}.set())
`}},{id:"timeroff",text:f("esp32.blocks.timeroff","stop timer # %1"),inputs:{ID:{menu:i}},mpy(s){let o=parseInt(s.getFieldValue("ID")||"1",10)-1;if(o<0)o=0;let n="";return n+=`timer_${o}.deinit()
`,n+=`return
`,n}}]}};import{translate as _,themeColors as H}from"@blockcode/core";import{ScratchBlocks as v}from"@blockcode/blocks";var de=()=>({id:"control",name:"%{BKY_CATEGORY_CONTROL}",themeColor:H.blocks.control.primary,inputColor:H.blocks.control.secondary,otherColor:H.blocks.control.tertiary,blocks:[{id:"wait",text:_("esp32.blocks.wait","wait %1 milliseconds"),inputs:{MS:{type:"integer",defaultValue:1000}},mpy(e){return`await asyncio.sleep_ms(${this.valueToCode(e,"MS",this.ORDER_NONE)})
`}},{id:"forever",text:v.Msg.CONTROL_FOREVER,repeat:!0,end:!0,mpy(e){let t=this.statementToCode(e,"SUBSTACK");t=this.addLoopTrap(t,e.id);let i="";return i+=`while True:
`,i+=`${this.INDENT}await asyncio.sleep(0)
`,i+=t,i}},"---",{id:"repeat",text:v.Msg.CONTROL_REPEAT,repeat:!0,inputs:{TIMES:{type:"integer",defaultValue:10}},mpy(e){let t=this.valueToCode(e,"TIMES",this.ORDER_NONE),i=this.statementToCode(e,"SUBSTACK");i=this.addLoopTrap(i,e.id);let s="";return s+=`for _ in range(int(${t})):
`,s+=`${this.INDENT}await asyncio.sleep(0)
`,s+=i,s}},"---",{id:"if",text:v.Msg.CONTROL_IF,substack:!0,inputs:{CONDITION:{type:"boolean"}},mpy(e){let t=this.valueToCode(e,"CONDITION",this.ORDER_NONE)||"False",i=this.statementToCode(e,"SUBSTACK")||this.PASS,s="";return s+=`if ${t}:
`,s+=i,s}},{id:"elseif",text:_("esp32.blocks.elseif","else if %1 then"),substack:!0,inputs:{CONDITION:{type:"boolean"}},mpy(e){let t=this.valueToCode(e,"CONDITION",this.ORDER_NONE)||"False",i=this.statementToCode(e,"SUBSTACK")||this.PASS,s="";return s+=`elif ${t}:
`,s+=i,s}},{id:"else",text:_("esp32.blocks.else","else"),substack:!0,mpy(e){let t=this.statementToCode(e,"SUBSTACK")||this.PASS,i="";return i+=`else:
`,i+=t,i}},"---",{id:"repeat_until",text:v.Msg.CONTROL_REPEATUNTIL,repeat:!0,inputs:{CONDITION:{type:"boolean"}},mpy(e){let t=this.valueToCode(e,"CONDITION",this.ORDER_NONE)||"False",i=this.statementToCode(e,"SUBSTACK");i=this.addLoopTrap(i,e.id);let s="";return s+=`while not ${t}:
`,s+=`${this.INDENT}await asyncio.sleep(0)
`,s+=i,s}},{id:"while",text:v.Msg.CONTROL_WHILE,repeat:!0,inputs:{CONDITION:{type:"boolean"}},mpy(e){let t=this.valueToCode(e,"CONDITION",this.ORDER_NONE)||"True",i=this.statementToCode(e,"SUBSTACK");i=this.addLoopTrap(i,e.id);let s="";return s+=`while ${t}:
`,s+=`${this.INDENT}await asyncio.sleep(0)
`,s+=i,s}},{id:"continue",text:_("esp32.blocks.continue","continue"),end:!0,mpy(e){return`continue
`}},{id:"break",text:_("esp32.blocks.break","break"),end:!0,mpy(e){return`break
`}},"---",{id:"runtime",text:_("esp32.blocks.runtime","run time %1"),output:"number",inputs:{UNIT:{menu:[[_("esp32.blocks.runtimeMilliseconds","milliseconds"),"MS"],[_("esp32.blocks.runtimeSeconds","seconds"),"SEC"]]}},ino(e){return[`(_times__${e.getFieldValue("UNIT")==="SEC"?"/1000":""})`,this.ORDER_ATOMIC]}}]});import{translate as d,themeColors as is}from"@blockcode/core";var me=()=>({id:"network",name:d("esp32.blocks.network","Network"),themeColor:"#28A0DC",inputColor:"#42A8DB",otherColor:"#1386BF",order:6,blocks:[{id:"connectwifi",text:d("esp32.blocks.connectWifi","connect wifi ssid: %1 password: %2"),inputs:{SSID:{type:"string",defaultValue:"esp32"},PASSWORD:{type:"string",defaultValue:"12345678"}},mpy(e){this.definitions_.import_threading="import _thread as threading",this.definitions_.import_network="import network",this.definitions_.wlan="wlan = network.WLAN(); wlan.active(True)";let t=this.valueToCode(e,"SSID",this.ORDER_NONE),i=this.valueToCode(e,"PASSWORD",this.ORDER_NONE);t=isNaN(t)?t:this.quote_(t),i=isNaN(i)?i:this.quote_(i);let s="";return s+="if not wlan.isconnected(): threading.start_new_thread(",s+=`lambda: wlan.connect(${t}, ${i}), ())
`,s+="while wlan.active() and not wlan.isconnected(): ",s+=`await asyncio.sleep_ms(500)
`,s}},{id:"disconnect",text:d("esp32.blocks.disconnectWifi","disconnect wifi"),mpy(e){this.definitions_.import_network="import network",this.definitions_.wlan="wlan = network.WLAN(); wlan.active(True)";let t="";return t+=`wlan.disconnect()
`,t+=`wlan.active(False)
`,t}},{id:"isconnected",text:d("esp32.blocks.isWifiConnected","wifi is connected?"),output:"boolean",mpy(e){return this.definitions_.import_network="import network",this.definitions_.wlan="wlan = network.WLAN(); wlan.active(True)",["wlan.isconnected()",this.ORDER_FUNCTION_CALL]}},"---",{id:"wifiscan",text:d("esp32.blocks.wifiScan","start scan wifi"),mpy(e){this.definitions_.import_threading="import _thread as threading",this.definitions_.import_network="import network",this.definitions_.wlan="wlan = network.WLAN(); wlan.active(True)",this.definitions_.wifi_list="wifi_list = []";let t="";return t+="threading.start_new_thread(",t+=`lambda: wifi_list.extend(wlan.scan()), ())
`,t}},{id:"wifiitem",text:d("esp32.blocks.wifiItem","%2 of item %1 of available wifi"),output:"number",inputs:{INDEX:{type:"integer",defaultValue:1},ITEM:{menu:[[d("esp32.blocks.wifiItemSsid","ssid"),"SSID"],[d("esp32.blocks.wifiItemMac","mac"),"MAC"],[d("esp32.blocks.wifiItemRssi","rssi"),"RSSI"],[d("esp32.blocks.wifiItemSecurity","security"),"SECURITY"]]}},mpy(e){let t=this.getAdjusted(e,"INDEX")||0,i=e.getFieldValue("ITEM")||"SSID";this.definitions_.import_network="import network",this.definitions_.wlan="wlan = network.WLAN(); wlan.active(True)",this.definitions_.wifi_list="wifi_list = []";let s=`wifi_list[${t}]`;switch(i){case"MAC":s+="[1]";break;case"RSSI":s+="[3]";break;case"SECURITY":s+="[4]";break;default:s+="[0]";break}return[s,this.ORDER_ATOMIC]}},{id:"wificounts",text:d("esp32.blocks.wifiCounts","available wifi counts"),output:"number",mpy(e){return this.definitions_.import_network="import network",this.definitions_.wlan="wlan = network.WLAN(); wlan.active(True)",this.definitions_.wifi_list="wifi_list = []",["len(wifi_list)",this.ORDER_FUNCTION_CALL]}},"---",{id:"startap",text:d("esp32.blocks.startap","start ap ssid: %1"),inputs:{SSID:{type:"string",defaultValue:"esp-ap"}},mpy(e){let t=this.valueToCode(e,"SSID",this.ORDER_NONE);this.definitions_.import_network="import network",this.definitions_.ap="ap = network.WLAN(network.WLAN.IF_AP)";let i="";return i+=`ap.config(ssid=${t})
`,i+=`ap.active(True)
`,i}},{id:"stopap",text:d("esp32.blocks.stopap","stop ap"),mpy(e){return this.definitions_.import_network="import network",this.definitions_.ap="ap = network.WLAN(network.AP_IF)",`ap.active(False)
`}},"---",{id:"espnowsend",text:d("esp32.blocks.espnowSend","send esp-now message %1 to %2"),inputs:{MESSAGE:{type:"string",defaultValue:"hello"},MAC:{type:"string",defaultValue:"ff:ff:ff:ff:ff:ff"}},mpy(e){let t=this.valueToCode(e,"MESSAGE",this.ORDER_NONE),i=this.valueToCode(e,"MAC",this.ORDER_NONE);this.definitions_.import_network="import network",this.definitions_.import_aioespnow="from aioespnow import AIOESPNow",this.definitions_.wlan="wlan = network.WLAN(); wlan.active(True)",this.definitions_.espnow="espnow = AIOESPNow(); espnow.active(True)";let s="";return s+=`async def espnow_asend(mac, msg):
`,s+=`${this.INDENT}mac_addr = bytes.fromhex(mac.replace(':', ''))
`,s+=`${this.INDENT}try:
`,s+=`${this.INDENT}${this.INDENT}await espnow.asend(mac_addr, msg.encode())
`,s+=`${this.INDENT}except OSError as err:
`,s+=`${this.INDENT}${this.INDENT}if len(err.args) > 1 and err.args[1] == 'ESP_ERR_ESPNOW_NOT_FOUND':
`,s+=`${this.INDENT}${this.INDENT}${this.INDENT}espnow.add_peer(mac_addr)
`,s+=`${this.INDENT}${this.INDENT}${this.INDENT}await espnow.asend(mac_addr, msg.encode())
`,this.definitions_.espnow_asend=s,`await espnow_asend(${i}, ${t})
`}},{id:"espnowrecv",text:d("esp32.blocks.espnowRecv","wait for esp-now incoming"),mpy(e){return this.definitions_.import_network="import network",this.definitions_.import_aioespnow="from aioespnow import AIOESPNow",this.definitions_.wlan="wlan = network.WLAN(); wlan.active(True)",this.definitions_.espnow="espnow = AIOESPNow(); espnow.active(True)",`peer, msg = await espnow.arecv()
`}},{id:"espnowmsg",text:d("esp32.blocks.espnowMsg","%1 of incoming"),output:"string",inputs:{TYPE:{menu:[[d("esp32.blocks.espnowMsgText","message"),"MESSAGE"],[d("esp32.blocks.espnowMsgMac","mac"),"MAC"]]}},mpy(e){let t=e.getFieldValue("TYPE")||"MESSAGE";return this.definitions_.import_network="import network",this.definitions_.import_aioespnow="from aioespnow import AIOESPNow",this.definitions_.wlan="wlan = network.WLAN(); wlan.active(True)",this.definitions_.espnow="espnow = AIOESPNow(); espnow.active(True)",[t==="MAC"?"peer":"msg",this.ORDER_ATOMIC]}},"---",{id:"espnowrepeat",text:d("esp32.blocks.espnowRepeat","repeat wait for esp-now incoming"),repeat:!0,end:!0,mpy(e){this.definitions_.import_network="import network",this.definitions_.import_aioespnow="from aioespnow import AIOESPNow",this.definitions_.wlan="wlan = network.WLAN(); wlan.active(True)",this.definitions_.espnow="espnow = AIOESPNow(); espnow.active(True)";let t=this.statementToCode(e,"SUBSTACK");t=this.addLoopTrap(t,e.id);let i="";return i+=`async for peer, msg in espnow:
`,i+=t,i}}]});import{translate as Xe,themeColors as Y}from"@blockcode/core";var Re=()=>({id:"protocol",name:Xe("esp32.blocks.protocols","Protocols"),themeColor:Y.blocks.sensing.primary,inputColor:Y.blocks.sensing.secondary,otherColor:Y.blocks.sensing.tertiary,order:5,blocks:[]});import{translate as O,themeColors as z}from"@blockcode/core";import{ScratchBlocks as u}from"@blockcode/blocks";var he=()=>({id:"operator",name:"%{BKY_CATEGORY_OPERATORS}",themeColor:z.blocks.operators.primary,inputColor:z.blocks.operators.secondary,otherColor:z.blocks.operators.tertiary,blocks:[{id:"calculate",text:"%1 %2 %3",output:"number",inputs:{NUM1:{type:"number",defaultValue:0},SYMBOL:{menu:[["+","+"],["-","-"],["×","*"],["÷","/"]]},NUM2:{type:"number",defaultValue:0}},mpy(e){let t=this.valueToCode(e,"NUM1",this.ORDER_NONE),i=this.valueToCode(e,"NUM2",this.ORDER_NONE),s=e.getFieldValue("SYMBOL")||"+",o={"+":this.ORDER_ADDITION,"-":this.ORDER_SUBTRACTION,"*":this.ORDER_MULTIPLICATION,"/":this.ORDER_DIVISION};return[`(${t} ${s} ${i})`,o[s]]}},"---",{id:"random",text:u.Msg.OPERATORS_RANDOM,output:"number",inputs:{FROM:{type:"integer",defaultValue:1},TO:{type:"integer",defaultValue:10}},mpy(e){this.definitions_.import_random="import random";let t=this.valueToCode(e,"FROM",this.ORDER_NONE),i=this.valueToCode(e,"TO",this.ORDER_NONE);return[`random.randint(${t}, ${i})`,this.ORDER_FUNCTION_CALL]}},"---",{id:"compare",text:"%1 %2 %3",output:"boolean",inputs:{NUM1:{type:"number",defaultValue:0},SYMBOL:{menu:[[">",">"],["<","<"],["=","=="],["≥",">="],["≤","<="],["≠","!="]]},NUM2:{type:"number",defaultValue:0}},mpy(e){let t=this.valueToCode(e,"NUM1",this.ORDER_NONE),i=this.valueToCode(e,"NUM2",this.ORDER_NONE),s=e.getFieldValue("SYMBOL")||">",o={">":this.ORDER_RELATIONAL,"<":this.ORDER_RELATIONAL,"==":this.ORDER_EQUALITY,">=":this.ORDER_RELATIONAL,"<=":this.ORDER_RELATIONAL,"!=":this.ORDER_EQUALITY};return[`(${t} ${s} ${i})`,o[s]]}},"---",{id:"and",text:u.Msg.OPERATORS_AND,output:"boolean",inputs:{OPERAND1:{type:"boolean"},OPERAND2:{type:"boolean"}},mpy(e){let t=this.valueToCode(e,"OPERAND1",this.ORDER_NONE),i=this.valueToCode(e,"OPERAND2",this.ORDER_NONE);return[`(${t} and ${i})`,this.ORDER_LOGICAL_AND]}},{id:"or",text:u.Msg.OPERATORS_OR,output:"boolean",inputs:{OPERAND1:{type:"boolean"},OPERAND2:{type:"boolean"}},mpy(e){let t=this.valueToCode(e,"OPERAND1",this.ORDER_NONE),i=this.valueToCode(e,"OPERAND2",this.ORDER_NONE);return[`(${t} or ${i})`,this.ORDER_LOGICAL_OR]}},{id:"not",text:u.Msg.OPERATORS_NOT,output:"boolean",inputs:{OPERAND:{type:"boolean"}},mpy(e){return[`(not ${this.valueToCode(e,"OPERAND",this.ORDER_NONE)||"True"})`,this.ORDER_LOGICAL_NOT]}},"---",{id:"bitwise",text:"%1 %2 %3",output:"number",inputs:{NUM1:{type:"integer",defaultValue:0},SYMBOL:{menu:[["&","&"],["|","|"],["^","^"],["<<","<<"],[">>",">>"]]},NUM2:{type:"integer",defaultValue:0}},mpy(e){let t=this.valueToCode(e,"NUM1",this.ORDER_NONE),i=this.valueToCode(e,"NUM2",this.ORDER_NONE),s=e.getFieldValue("SYMBOL")||"&",o={"&":this.ORDER_BITWISE_AND,"|":this.ORDER_BITWISE_OR,"^":this.ORDER_BITWISE_XOR,"<<":this.ORDER_BITWISE_SHIFT,">>":this.ORDER_BITWISE_SHIFT};return[`(${t} ${s} ${i})`,o[s]]}},{id:"bitwise_not",text:"~ %1",output:"number",inputs:{NUM:{type:"integer",defaultValue:0}},mpy(e){return[`(~${this.valueToCode(e,"NUM",this.ORDER_NONE)})`,this.ORDER_BITWISE_NOT]}},"---",{id:"larger",text:O("esp32.blocks.operatorLarger","larger of %1 and %2"),output:"number",inputs:{NUM1:{type:"number",defaultValue:0},NUM2:{type:"number",defaultValue:0}},mpy(e){let t=this.valueToCode(e,"NUM1",this.ORDER_NONE),i=this.valueToCode(e,"NUM2",this.ORDER_NONE);return[`max(${t}, ${i})`,this.ORDER_FUNCTION_CALL]}},{id:"smaller",text:O("esp32.blocks.operatorSmaller","smaller of %1 and %2"),output:"number",inputs:{NUM1:{type:"number",defaultValue:0},NUM2:{type:"number",defaultValue:0}},mpy(e){let t=this.valueToCode(e,"NUM1",this.ORDER_NONE),i=this.valueToCode(e,"NUM2",this.ORDER_NONE);return[`min(${t}, ${i})`,this.ORDER_FUNCTION_CALL]}},{id:"mod",text:u.Msg.OPERATORS_MOD,output:"number",inputs:{NUM1:{type:"integer",defaultValue:0},NUM2:{type:"integer",defaultValue:0}},mpy(e){let t=this.valueToCode(e,"NUM1",this.ORDER_NONE),i=this.valueToCode(e,"NUM2",this.ORDER_NONE);return[`(${t} % ${i})`,this.ORDER_MODULUS]}},{id:"round",text:u.Msg.OPERATORS_ROUND,output:"number",inputs:{NUM:{type:"number",defaultValue:0}},mpy(e){return this.definitions_.import_math="import math",[`round(${this.valueToCode(e,"NUM",this.ORDER_NONE)})`,this.ORDER_FUNCTION_CALL]}},"---",{id:"mathop",text:u.Msg.MATHOP,output:"number",inputs:{OPERATOR:{menu:[[u.Msg.OPERATORS_MATHOP_ABS,"math.fabs"],[u.Msg.OPERATORS_MATHOP_FLOOR,"math.floor"],[u.Msg.OPERATORS_MATHOP_CEILING,"math.ceil"],[u.Msg.OPERATORS_MATHOP_SQRT,"math.sqrt"],[u.Msg.OPERATORS_MATHOP_SIN,"math.sin"],[u.Msg.OPERATORS_MATHOP_COS,"math.cos"],[u.Msg.OPERATORS_MATHOP_TAN,"math.tan"],[u.Msg.OPERATORS_MATHOP_ASIN,"math.asin"],[u.Msg.OPERATORS_MATHOP_ACOS,"math.acos"],[u.Msg.OPERATORS_MATHOP_ATAN,"math.atan"],[u.Msg.OPERATORS_MATHOP_LN,"math.log"],[u.Msg.OPERATORS_MATHOP_LOG,"math.log10"],[u.Msg.OPERATORS_MATHOP_EEXP,"math.exp"],[u.Msg.OPERATORS_MATHOP_10EXP,"pow10"]]},NUM:{type:"integer",defaultValue:0}},mpy(e){this.definitions_.import_math="import math";let t=e.getFieldValue("OPERATOR")||"abs",i=this.valueToCode(e,"NUM",this.ORDER_NONE),s="";if(t==="pow10")s+=`math.pow(10, ${i})`;else s+=`${t}(${i})`;return[s,this.ORDER_FUNCTION_CALL]}},"---",{id:"convert",text:O("esp32.blocks.dataConvert","convert %1 to %2"),output:!0,inputs:{DATA:{type:"string",defaultValue:"3.1415"},TYPE:{menu:[[O("esp32.blocks.dataConvert.int","int"),"int"],[O("esp32.blocks.dataConvert.float","float"),"float"],[O("esp32.blocks.dataConvert.string","str"),"str"],[O("esp32.blocks.dataConvert.list","list"),"list"]]}},mpy(e){let t=this.valueToCode(e,"DATA",this.ORDER_NONE);return[`${e.getFieldValue("TYPE")||"int"}(${t})`,this.ORDER_FUNCTION_CALL]}},"---",{id:"sizeof",text:O("esp32.blocks.dataLengthOf","length of %1"),output:"number",inputs:{DATA:{type:"string",defaultValue:"esp32"}},mpy(e){return[`len(${this.valueToCode(e,"DATA",this.ORDER_NONE)})`,this.ORDER_FUNCTION_CALL]}},"---",{id:"constrain",text:O("esp32.blocks.dataConstrain","constrain %1 between %2 to %3"),output:"number",inputs:{DATA:{type:"integer",defaultValue:0},FROM:{type:"integer",defaultValue:0},TO:{type:"integer",defaultValue:255}},mpy(e){let t=this.valueToCode(e,"DATA",this.ORDER_NONE),i=this.valueToCode(e,"FROM",this.ORDER_NONE),s=this.valueToCode(e,"TO",this.ORDER_NONE);return[`min(max(${t}, ${i}), ${s})`,this.ORDER_FUNCTION_CALL]}},{id:"map",text:O("esp32.blocks.dataMap","map %1 from %2 - %3 to %4 - %5"),output:"number",inputs:{DATA:{type:"integer",defaultValue:0},FROMLOW:{type:"integer",defaultValue:0},FROMHIGH:{type:"integer",defaultValue:1023},TOLOW:{type:"integer",defaultValue:0},TOHIGHT:{type:"integer",defaultValue:255}},mpy(e){let t=this.valueToCode(e,"DATA",this.ORDER_NONE),i=this.valueToCode(e,"FROMLOW",this.ORDER_NONE),s=this.valueToCode(e,"FROMHIGH",this.ORDER_NONE),o=this.valueToCode(e,"TOLOW",this.ORDER_NONE),n=this.valueToCode(e,"TOHIGHT",this.ORDER_NONE);return[`(${t} - ${i}) * (${n} - ${o}) // (${s} - ${i}) + ${o}`,this.ORDER_FUNCTION_CALL]}}]});var be=()=>({id:"data",skipXML:!0,blocks:[{id:"setvariableto",mpy(e){let t=this.getVariableName(e.getFieldValue("VARIABLE")),i=this.valueToCode(e,"VALUE",this.ORDER_NONE),s=`${t} = ${i}`;if(e.getRootBlock().type==="event_whensetup")return this.definitions_[`variable_${t}`]=s,"";return s+`
`}},{id:"changevariableby",mpy(e){let t=this.getVariableName(e.getFieldValue("VARIABLE")),i=this.valueToCode(e,"VALUE",this.ORDER_NONE);return`${t} = ${i}
`}},{id:"variable",mpy(e){return[this.getVariableName(e.getFieldValue("VARIABLE")),this.ORDER_ATOMIC]}},{id:"insertatlist",mpy(e){let t="arr"+this.getVariableName(e.getFieldValue("LIST")),i=this.valueToCode(e,"INDEX",this.ORDER_NONE),s=`${t} = [None] * int(${i})`;if(e.getRootBlock().type==="event_whensetup")return this.definitions_[`variable_${t}`]=s,"";return s+`
`}},{id:"replaceitemoflist",mpy(e){let t="arr"+this.getVariableName(e.getFieldValue("LIST")),i=this.valueToCode(e,"ITEM",this.ORDER_NONE),s=this.valueToCode(e,"INDEX",this.ORDER_NONE);return`${t}[int(${s})] = ${i}
`}},{id:"listcontents",mpy(e){return["arr"+this.getVariableName(e.getFieldValue("LIST")),this.ORDER_ATOMIC]}},{id:"itemoflist",mpy(e){let t="arr"+this.getVariableName(e.getFieldValue("LIST")),i=this.valueToCode(e,"INDEX",this.ORDER_NONE);return[`${t}[int(${i})]`,this.ORDER_MEMBER]}},{id:"lengthoflist",mpy(e){return[`len(${"arr"+this.getVariableName(e.getFieldValue("LIST"))})`,this.ORDER_FUNCTION_CALL]}}]});var Ee=()=>({id:"procedures",skipXML:!0,blocks:[{id:"definition",mpy(e){let t=e.childBlocks_[0],i=this.getFunctionName(t.getProcCode()),s=this.statementToCode(e)||this.PASS,o=t.childBlocks_.map((r)=>`${this.getVariableName(r.getFieldValue("VALUE"))}`),n="";n+=`async def ${i}(${o.join(", ")}):
`,n+=s,this.definitions_[i]=n}},{id:"call",mpy(e){let t=this.getFunctionName(e.getProcCode()),i=e.argumentIds_.map((o)=>this.valueToCode(e,o,this.ORDER_NONE)||"False"),s=`await ${t}(${i.join(", ")})`;if(e.return_)return[s,this.ORDER_FUNCTION_CALL];return s+`
`}},{id:"return",mpy(e){return`return ${this.valueToCode(e,"VALUE",this.ORDER_NONE)}
`}}]});import{MicroPythonGenerator as qe}from"@blockcode/blocks";var Ke=`# Generate by BlockCode
`;class y extends qe{constructor(){super("ESP32")}finish(e){return Ke+super.finish(e)}}function Oe(e){let t=pe(e),i=le(),s=ce(),o=ue(e),n=de(),r=me(),p=Re(),m=he(),l=be(),oe=Ee();return[t,i,s,o,n,r,p,m,l,oe]}import{jsx as st}from"preact/jsx-runtime";var et=(e)=>e.replaceAll(/[^a-z0-9]/gi,"_"),ke=new y,tt=()=>["device","data"];function _e(){let{tabIndex:e}=Qe(),{meta:t}=Ze(),i=Ne(()=>{return Oe(t.value.boardType,t.value.classicEvents)},[t.value.boardType,t.value.classicEvents]),s=Ne((o,n,r,p)=>{Je.prototype.onDefinitions.call(ke);for(let m in r)for(let l of r[m])if(l.name[0]!=="_")n(`import_${m}_${l.name}`,`from ${et(m)} import ${l.name}`)},[]);return st(je,{enableCodePreview:!0,enableProcedureReturns:!0,disableSensingBlocks:!0,disableGenerateCode:e.value!==0,generator:ke,onBuildinExtensions:i,onDefinitions:s,onExtensionsFilter:tt})}import{useAppContext as ot}from"@blockcode/core";function X(e){let t=globalThis.document,i=t.createElement("style");i.appendChild(t.createTextNode(e)),t.head.append(i)}X("._1Ep-la_device-icon{width:20px;height:20px}._1Ep-la_check-icon{margin-right:calc(var(--space)/2);visibility:hidden;width:14px}._1Ep-la_check-icon._1Ep-la_checked{visibility:visible}._1Ep-la_blank-check-item>div{padding-left:calc(var(--space)/2 + 14px)}");var b={checked:"_1Ep-la_checked",checkIcon:"_1Ep-la_check-icon",deviceIcon:"_1Ep-la_device-icon",blankCheckItem:"_1Ep-la_blank-check-item"};var fe="./assets/icon-device-40zreghe.png";import{jsx as nt}from"preact/jsx-runtime";function Te(){let{appState:e}=ot();return nt("img",{className:b.deviceIcon,src:fe})}import{useProjectContext as rt,Text as M}from"@blockcode/core";import{jsx as L}from"preact/jsx-runtime";function ge(){let{meta:e}=rt();switch(e.value.boardType){case a.ESP32S3:return L(M,{id:"esp32.menubar.device.esp32s3",defaultMessage:"ESP32-S3"});case a.ESP32C3:return L(M,{id:"esp32.menubar.device.esp32c3",defaultMessage:"ESP32-C3"});case a.ESP32_IOT_BOARD:return L(M,{id:"esp32.menubar.device.esp32IotBoard",defaultMessage:"ESP32 IOT Board"})}return L(M,{id:"esp32.menubar.device.esp32",defaultMessage:"ESP32"})}import{useCallback as Le}from"preact/hooks";import{nanoid as ft,classNames as xe}from"@blockcode/utils";import{useProjectContext as Tt,setAlert as ee,delAlert as gt}from"@blockcode/core";import{MPYUtils as V}from"@blockcode/board";import{sleepMs as $e}from"@blockcode/utils";var x=[{usbVendorId:12346},{usbVendorId:6790}];import{Spinner as wt,Text as te,MenuSection as St,MenuItem as Ve}from"@blockcode/core";import{useEffect as Ot,useCallback as Nt}from"preact/hooks";import{classNames as Z}from"@blockcode/utils";import{useProjectContext as kt,setMeta as Pe,Text as J,MenuSection as ye,MenuItem as j}from"@blockcode/core";import{useEffect as Ie}from"preact/hooks";import{useSignal as ve}from"@preact/signals";import{nanoid as at,classNames as pt,sleep as lt,arrayBufferToBinaryString as ct,getBinaryCache as Ce,setBinaryCache as ut}from"@blockcode/utils";import{useProjectContext as dt,setAlert as A,delAlert as mt,openPromptModal as Js}from"@blockcode/core";import{ESPTool as C}from"@blockcode/board";var Xs="0.1.0";var Se={iotboard:{download:"https://firmware.blockcode.fun/iotboard"}};import{Text as S,Spinner as Q,MenuItem as Rt}from"@blockcode/core";import{jsx as N}from"preact/jsx-runtime";var E=null,ht=(e)=>{if(!E)E=at();if(e<100)A({id:E,icon:N(Q,{level:"success"}),message:N(S,{id:"esp32.menubar.device.restoring",defaultMessage:"Firmware restoring...{progress}%",progress:e})});else A({id:E,icon:N(Q,{level:"success"}),message:N(S,{id:"esp32.menubar.device.recovering",defaultMessage:"Recovering..."})})},q=()=>{mt(E),E=null},K=(e)=>{if(e==="NotFoundError")return;A("connectionError",1000)},Ae=async(e)=>{try{return await fetch(e,{method:"GET"})}catch(t){return await lt(1),Ae(e)}},w=async(e,t,i,s)=>{if(s.value)return;let o=await Ce("iotboardFirmware");if(o?.hash===t&&o?.binaryString){s.value=!0,delete w.downloading;return}if(w.downloading)return;w.downloading=!0;let r=await(await Ae(e)).arrayBuffer();delete w.downloading;let p=await crypto.subtle.digest("SHA-256",r);if(Array.from(new Uint8Array(p)).map((l)=>l.toString(16).padStart(2,"0")).join("")!==t){w(e,t,i,s);return}await ut("iotboardFirmware",{version:i,hash:t,binaryString:ct(r)}),s.value=!0},bt=async()=>{if(E)return;let e;try{e=await C.connect(x,460800)}catch(o){K(o.name)}if(!e)return;let t=C.check(e).catch(()=>{K(),q(),C.disconnect(e)}),i=async(o)=>{A({id:E,icon:N(Q,{level:"success"}),message:N(S,{id:"esp32.menubar.device.erasing",defaultMessage:"Erasing..."})});try{await e.main(),await C.writeFlash(e,o,!0,(n)=>ht(n)),A({id:E,icon:null,message:N(S,{id:"esp32.menubar.device.restoreDone",defaultMessage:"Firmware resotre completed!"}),onClose:q})}catch(n){K(n.name),q()}finally{t.cancel()}await C.disconnect(e)},s=await Ce("iotboardFirmware");if(s)i([{data:s.binaryString,address:0}])};function De({className:e}){let{meta:t}=dt(),i=ve(!1),s=ve(null);return Ie(()=>E=null,[]),Ie(async()=>{i.value=!1;let o=Se.iotboard.download;if(!s.value)s.value=await fetch(`${o}/version.json`).then((p)=>p.json());let n=`${o}/${s.value.download}`.replaceAll("{version}",s.value.version),r=s.value.hash;w(n,r,s.value.version,i)},[]),N(Rt,{disabled:E||t.value.boardType!==a.ESP32_IOT_BOARD,className:pt(e,b.blankCheckItem),label:i.value?N(S,{id:"esp32.menubar.device.iotboardFirmware",defaultMessage:"Restore IOT Board firmware"}):N(S,{id:"esp32.menubar.device.caching",defaultMessage:"Caching latest firmware..."}),onClick:bt})}var $="./assets/icon-check-5hn8sb1h.svg";import{jsx as T,jsxs as I,Fragment as _t}from"preact/jsx-runtime";function Me({itemClassName:e}){let{meta:t}=kt();Ot(()=>{if(!t.value.boardType)Pe("boardType",a.ESP32S3)},[]);let i=Nt((s)=>()=>{Pe({boardType:s})},[]);return I(_t,{children:[I(ye,{children:[I(j,{className:e,onClick:i(a.ESP32),children:[T("img",{className:Z(b.checkIcon,{[b.checked]:t.value.boardType===a.ESP32}),src:$}),T(J,{id:"esp32.menubar.device.esp32",defaultMessage:"ESP32"})]}),I(j,{className:e,onClick:i(a.ESP32S3),children:[T("img",{className:Z(b.checkIcon,{[b.checked]:t.value.boardType===a.ESP32S3}),src:$}),T(J,{id:"esp32.menubar.device.esp32s3",defaultMessage:"ESP32-S3"})]})]}),I(ye,{children:[I(j,{className:e,onClick:i(a.ESP32_IOT_BOARD),children:[T("img",{className:Z(b.checkIcon,{[b.checked]:t.value.boardType===a.ESP32_IOT_BOARD}),src:$}),T(J,{id:"esp32.menubar.device.esp32IotBoard",defaultMessage:"ESP32 IOT Board"})]}),T(De,{className:e})]})]})}import{jsx as g,jsxs as Ue,Fragment as It}from"preact/jsx-runtime";var k=null,se=()=>{gt(k),k=null},Be=(e)=>{if(!k)k=ft();if(e<100)ee({id:k,icon:g(wt,{level:"success"}),message:g(te,{id:"gui.alert.downloadingProgress",defaultMessage:"Downloading...{progress}%",progress:e})});else ee("downloadCompleted",{id:k}),setTimeout(se,2000)},B=(e)=>{if(e==="NotFoundError")return;ee("connectionError",1000)},Fe=async(e,t,i)=>{let s=V.check(e).catch(()=>{B(),se()}),o=[].concat(t,i);Be(0);try{await V.write(e,o,Be),e.exitRawRepl(),await $e(1000),e.reset(),await $e(1000)}catch(n){console.log(n),B(n),se()}finally{e.disconnect()}s.cancel()};function We({itemClassName:e}){let{meta:t,file:i,assets:s}=Tt(),o=Le(async()=>{if(k)return;let r;try{r=await V.connect(x,{baudRate:115200})}catch(p){console.log(p),B(p.name)}if(!r)return;Fe(r,i.value,s.value)},[]),n=Le(async()=>{if(k)return;let r;try{r=await V.connectBLE()}catch(p){console.log(p),B(p.name)}if(!r)return;Fe(r,i.value,s.value)},[]);return Ue(It,{children:[Ue(St,{children:[t.value.boardType===a.ESP32_IOT_BOARD&&g(Ve,{disabled:k,className:xe(e,b.blankCheckItem),label:g(te,{id:"esp32.menubar.device.downloadBle",defaultMessage:"Download program via Bluetooth (BLE)"}),onClick:n}),g(Ve,{disabled:k,className:xe(e,b.blankCheckItem),label:g(te,{id:"esp32.menubar.device.download",defaultMessage:"Download program via Serial Port"}),onClick:o})]}),g(Me,{itemClassName:e})]})}var Ge={assets:[],files:[{id:"main",type:"text/x-python"}]};import{jsx as ie}from"preact/jsx-runtime";var Fi={onNew(){return Ge},onSave(e,t,i){let s=[];return e=e.map((o)=>{return s.push(o.extensions),{id:o.id,type:o.type,xml:o.xml}}),{files:e,assets:t,meta:{extensions:Array.from(new Set(s.flat())),boardType:i.boardType??a.ESP32,classicEvents:i.classicEvents??!1}}},async onThumb(){let e=D.getMainWorkspace();if(e){let t=e.getCanvas();if(t)return await vt(t,{})}},onUndo(e){if(e instanceof MouseEvent)D.getMainWorkspace()?.undo(!1)},onRedo(e){if(e instanceof MouseEvent)D.getMainWorkspace()?.undo(!0)},onEnableUndo(){let e=D.getMainWorkspace();return e?.undoStack_&&e.undoStack_.length!==0},onEnableRedo(){let e=D.getMainWorkspace();return e?.redoStack_&&e.redoStack_.length!==0},menuItems:[{icon:ie(Te,{}),label:ie(ge,{}),Menu:We}],tabs:[{...Ct,Content:_e},{...Dt,Content:()=>ie(At,{})},{...Pt,disabled:!0}]};export{Fi as default};
