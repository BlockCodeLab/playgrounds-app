import{addLocalesMessages as je}from"@blockcode/core";var le={"esp32.menubar.device":"ESP32","esp32.menubar.device.esp32":"ESP32","esp32.menubar.device.esp32s3":"ESP32-S3","esp32.menubar.device.esp32c3":"ESP32-C3","esp32.menubar.device.esp32c6":"ESP32-C6","esp32.menubar.device.esp32IotBoard":"ESP32 IOT Board","esp32.menubar.device.sync":"Sync program","esp32.menubar.device.download":"Download program via USB","esp32.menubar.device.downloadBle":"Download program via Bluetooth","esp32.menubar.device.iotboardFirmware":"Restore IOT Board firmware","esp32.menubar.device.firmware":"Restore firmware","esp32.menubar.device.erasing":"Erasing...","esp32.menubar.device.restoring":"Firmware restoring...{progress}%","esp32.menubar.device.recovering":"Recovering...","esp32.menubar.device.restoreDone":"Firmware resotre completed! Now press RESET key","esp32.menubar.device.caching":"Caching latest firmware...","esp32.extension.tags.controllers":"Controllers","esp32.extension.tags.sensors":"Sensors","esp32.extension.tags.actuators":"Actuators","esp32.extension.tags.displays":"Displays","esp32.extension.tags.modules":"Modules","esp32.extension.tags.communication":"Communication","esp32.extension.tags.data":"Data","esp32.extension.tags.kits":"Kits","esp32.blocks.wait":"wait %1 milliseconds","esp32.blocks.break":"break","esp32.blocks.continue":"continue","esp32.blocks.elseif":"else if %1 then","esp32.blocks.else":"else","esp32.blocks.runtime":"run time %1","esp32.blocks.runtimeMilliseconds":"milliseconds","esp32.blocks.runtimeSeconds":"seconds","esp32.blocks.dataConvert":"convert %1 to %2","esp32.blocks.dataConvert.int":"int","esp32.blocks.dataConvert.float":"float","esp32.blocks.dataConvert.string":"str","esp32.blocks.dataConvert.list":"list","esp32.blocks.dataLengthOf":"length of %1","esp32.blocks.dataConstrain":"constrain %1 between %2 to %3","esp32.blocks.dataMap":"map %1 from %2 - %3 to %4 - %5","esp32.blocks.whenstart":"when {name} start","esp32.blocks.timerset":"set timer # %1 per %2 milliseconds","esp32.blocks.timeroff":"stop timer # %1","esp32.blocks.operatorLarger":"larger of %1 and %2","esp32.blocks.operatorSmaller":"smaller of %1 and %2","esp32.blocks.pin":"Pins","esp32.blocks.setmode":"set pin %1 mode to %2","esp32.blocks.inputMode":"input","esp32.blocks.ouputMode":"output","esp32.blocks.inputPullUpMode":"input pull-up","esp32.blocks.inputPullDownMode":"input pull-down","esp32.blocks.setdigital":"set pin %1 to %2","esp32.blocks.digitalHigh":"high","esp32.blocks.digitalLow":"low","esp32.blocks.setpwmfreq":"set pin %1 pwm frequency to %2 Hz","esp32.blocks.setpwm":"set pin %1 pwm to %2","esp32.blocks.setanalog":"set pin %1 analog to %2","esp32.blocks.isDigitalHigh":"pin %1 is high?","esp32.blocks.analogValue":"pin %1 analog value","esp32.blocks.attachinterrupt":"attach pin %1 interrupt to %2","esp32.blocks.interruptRising":"rising","esp32.blocks.interruptFalling":"falling","esp32.blocks.interruptChange":"change","esp32.blocks.interruptHigh":"high","esp32.blocks.interruptLow":"low","esp32.blocks.detachinterrupt":"detach pin %1 interrupt","esp32.blocks.network":"Network","esp32.blocks.protocols":"Protocols","esp32.blocks.serial":"Serial","esp32.blocks.serialBaudrate":"set baudrate to %1","esp32.blocks.serialTimeout":"set timeout to %1 milliseconds","esp32.blocks.serialPrint":"print %1 with %2","esp32.blocks.serialPrintWarp":"warp","esp32.blocks.serialPrintNoWarp":"no-warp","esp32.blocks.serialPrintHEX":"hex","esp32.blocks.serialPrintNumber":"print %1","esp32.blocks.serialAvailable":"available data?","esp32.blocks.serialAvailableLength":"available data length","esp32.blocks.serialReadString":"read a string","esp32.blocks.serialReadStringUntil":"read a string until %1","esp32.blocks.serialReadParse":"read a %1 number","esp32.blocks.serialReadParseInteger":"int","esp32.blocks.serialReadParseFloat":"float","esp32.blocks.serialRead":"read a byte","esp32.blocks.serialReadBytes":"read %1 bytes","esp32.blocks.text":"Text","esp32.blocks.textEquals":"%1 equals %2 (not case-sensitive)?","esp32.blocks.textRemove":"remove letters from %1 to %2 of %3","esp32.blocks.textReplace":"replace %1 of %2 with %3","esp32.blocks.textReplaceLetter":"replace letter %1 of %2 with %3","esp32.blocks.textSubstring":"substring of %1 from %2 to %3","esp32.blocks.textWith":"%1 %2 with %3?","esp32.blocks.textStartsWith":"starts","esp32.blocks.textEndsWith":"ends","esp32.blocks.textCase":"get %1 of %2","esp32.blocks.textLowerCase":"lower-case","esp32.blocks.textUpperCase":"upper-case","esp32.blocks.textTrim":"remove %1 leading and trailing whitespace","esp32.blocks.textConvert":"convert %1 to %2","esp32.blocks.textConvertFrom":"convert %1 to String","esp32.blocks.connectWifi":"connect wi-fi ssid: %1 password: %2","esp32.blocks.disconnectWifi":"disconnect wi-fi","esp32.blocks.isWifiConnected":"wi-fi is connected?","esp32.blocks.wifiScan":"start scan wi-fi","esp32.blocks.wifiItem":"%2 of item %1 of available wi-fi","esp32.blocks.wifiItemSsid":"ssid","esp32.blocks.wifiItemMac":"mac","esp32.blocks.wifiItemRssi":"rssi","esp32.blocks.wifiItemSecurity":"security","esp32.blocks.wifiCounts":"available wi-fi counts","esp32.blocks.startap":"start ap ssid: %1","esp32.blocks.stopap":"stop ap","esp32.blocks.espnowSend":"send esp-now message %1 to %2","esp32.blocks.espnowRecv":"wait for esp-now incoming","esp32.blocks.espnowMsg":"%1 of incoming","esp32.blocks.espnowMsgText":"message","esp32.blocks.espnowMsgMac":"mac","esp32.blocks.espnowRepeat":"repeat wait for esp-now incoming","esp32.blocks.spiInit":"initialize SPI %1 freq:%2Hz","esp32.blocks.spiHSPI":"HSPI","esp32.blocks.spiVSPI":"VSPI","esp32.blocks.spiWrite":"SPI %1 write %2","esp32.blocks.spiRead":"SPI %1 read %2 bytes","esp32.blocks.i2cInit":"initialize I2C SDA:%1 SCL:%2 freq:%3Hz","esp32.blocks.i2cScan":"I2C scan devices","esp32.blocks.i2cWrite":"I2C write to %1:%2","esp32.blocks.i2cRead":"I2C read from %1 :%2 bytes","esp32.blocks.i2sInit":"initialize I2S BCK:%1 WS:%2 DATA:%3 rate:%4Hz","esp32.blocks.i2sPlay":"I2S play %1"};var pe={"esp32.menubar.device":"ESP32","esp32.menubar.device.esp32":"ESP32","esp32.menubar.device.esp32s3":"ESP32-S3","esp32.menubar.device.esp32c3":"ESP32-C3","esp32.menubar.device.esp32c6":"ESP32-C6","esp32.menubar.device.esp32IotBoard":"ESP32 IOT Board","esp32.menubar.device.sync":"同步程序","esp32.menubar.device.download":"通过 USB 下载程序","esp32.menubar.device.downloadBle":"通过蓝牙下载程序","esp32.menubar.device.iotboardFirmware":"还原 IOT Borad 出厂固件","esp32.menubar.device.firmware":"还原固件","esp32.menubar.device.erasing":"正在清除…","esp32.menubar.device.restoring":"正在还原固件…{progress}%","esp32.menubar.device.recovering":"恢复设备…","esp32.menubar.device.restoreDone":"还原固件完成，请按下 RESET 键。","esp32.menubar.device.caching":"正在缓存最新固件…","esp32.extension.tags.controllers":"输入模块","esp32.extension.tags.sensors":"传感器","esp32.extension.tags.actuators":"执行器","esp32.extension.tags.displays":"显示模块","esp32.extension.tags.modules":"智能模块","esp32.extension.tags.communication":"通讯","esp32.extension.tags.data":"数据","esp32.extension.tags.kits":"套件","esp32.blocks.wait":"等待 %1 毫秒","esp32.blocks.break":"跳出重复执行","esp32.blocks.continue":"跳到下一次执行","esp32.blocks.elseif":"否则，如果 %1 那么","esp32.blocks.else":"否则","esp32.blocks.runtime":"运行时长 %1","esp32.blocks.runtimeMilliseconds":"毫秒","esp32.blocks.runtimeSeconds":"秒","esp32.blocks.dataConvert":"将 %1 类型转为 %2","esp32.blocks.dataConvert.int":"整数","esp32.blocks.dataConvert.float":"浮点数","esp32.blocks.dataConvert.string":"字符串","esp32.blocks.dataConvert.list":"列表","esp32.blocks.dataLengthOf":"%1 长度","esp32.blocks.dataConstrain":"约束 %1 在 %2 和 %3 之间","esp32.blocks.dataMap":"映射 %1 从 %2 - %3 到 %4 - %5","esp32.blocks.whenstart":"当 {name} 启动","esp32.blocks.timerset":"将定时器 # %1 间隔设为每 %2 毫秒","esp32.blocks.timeroff":"关闭定时器 # %1","esp32.blocks.operatorLarger":"%1 和 %2 之中最大","esp32.blocks.operatorSmaller":"%1 和 %2 之中最小","esp32.blocks.pin":"引脚","esp32.blocks.setmode":"将引脚 %1 设为 %2 模式","esp32.blocks.inputMode":"输入","esp32.blocks.ouputMode":"输出","esp32.blocks.inputPullUpMode":"上拉输入","esp32.blocks.inputPullDownMode":"下拉输入","esp32.blocks.setdigital":"将引脚 %1 设为 %2","esp32.blocks.digitalHigh":"高电平","esp32.blocks.digitalLow":"低电平","esp32.blocks.setpwmfreq":"将引脚 %1 PWM 频率设为 %2","esp32.blocks.setpwm":"将引脚 %1 PWM 设为 %2","esp32.blocks.setanalog":"将引脚 %1 模拟值设为 %2","esp32.blocks.isDigitalHigh":"引脚 %1 是高电平？","esp32.blocks.analogValue":"引脚 %1 模拟值","esp32.blocks.attachinterrupt":"将引脚 %1 中断模式设为 %2","esp32.blocks.interruptRising":"电平上升","esp32.blocks.interruptFalling":"电平下降","esp32.blocks.interruptChange":"电平改变","esp32.blocks.interruptHigh":"高电平","esp32.blocks.interruptLow":"低电平","esp32.blocks.detachinterrupt":"取消引脚 %1 中断","esp32.blocks.network":"网络通讯","esp32.blocks.protocols":"数据协议","esp32.blocks.serial":"串口","esp32.blocks.serialBaudrate":"将波特率设为 %1","esp32.blocks.serialTimeout":"将超时设为 %1 毫秒","esp32.blocks.serialPrint":"用 %2 模式打印 %1","esp32.blocks.serialPrintWarp":"换行","esp32.blocks.serialPrintNoWarp":"不换行","esp32.blocks.serialPrintHEX":"16进制","esp32.blocks.serialPrintNumber":"打印 %1","esp32.blocks.serialAvailable":"存在可读取数据?","esp32.blocks.serialAvailableLength":"可读取数据长度","esp32.blocks.serialReadString":"读取文本","esp32.blocks.serialReadStringUntil":"读取文本直到 %1","esp32.blocks.serialReadParse":"读取 %1","esp32.blocks.serialReadParseInteger":"整数","esp32.blocks.serialReadParseFloat":"浮点数","esp32.blocks.serialRead":"读取 1 个字节","esp32.blocks.serialReadBytes":"读取 %1 个字节","esp32.blocks.text":"文本","esp32.blocks.textEquals":"%1 和 %2 相同（忽视大小写）？","esp32.blocks.textRemove":"删除 %3 从第 %1 个到第 %2 个字符","esp32.blocks.textReplace":"将 %2 中的 %1 替换为 %3","esp32.blocks.textReplaceLetter":"将 %2 中的第 %1 个字符替换为 %3","esp32.blocks.textSubstring":"截取 %1 从第 %2 个到第 %3 个字符","esp32.blocks.textWith":"%1 %2 %3?","esp32.blocks.textStartsWith":"开始于","esp32.blocks.textEndsWith":"结束于","esp32.blocks.textCase":"将 %2 字母转为 %1","esp32.blocks.textLowerCase":"小写","esp32.blocks.textUpperCase":"大写","esp32.blocks.textTrim":"清除 %1 前后空白字符","esp32.blocks.textConvert":"将 %1 转为 %2","esp32.blocks.textConvertFrom":"将 %1 转为文本","esp32.blocks.connectWifi":"连接 Wi-Fi 网络 SSID: %1 密码: %2","esp32.blocks.disconnectWifi":"断开 Wi-Fi 网络","esp32.blocks.isWifiConnected":"Wi-Fi 网络已连接？","esp32.blocks.wifiScan":"开始扫描 Wi-Fi","esp32.blocks.wifiItem":"第 %1 个可用 Wi-Fi 的 %2","esp32.blocks.wifiItemSsid":"SSID","esp32.blocks.wifiItemMac":"MAC","esp32.blocks.wifiItemRssi":"RSSI","esp32.blocks.wifiItemSecurity":"加密类型","esp32.blocks.wifiCounts":"可用 Wi-Fi 数量","esp32.blocks.startap":"开启热点 SSID: %1","esp32.blocks.stopap":"关闭热点","esp32.blocks.espnowSend":"发送 ESP-Now 消息 %1 到 %2","esp32.blocks.espnowRecv":"等待 ESP-Now 接收消息","esp32.blocks.espnowMsg":"接受到 %1","esp32.blocks.espnowMsgText":"消息","esp32.blocks.espnowMsgMac":"MAC","esp32.blocks.espnowRepeat":"重复等待 ESP-Now 接收消息","esp32.blocks.spiInit":"初始化SPI %1 频率:%2Hz","esp32.blocks.spiHSPI":"HSPI","esp32.blocks.spiVSPI":"VSPI","esp32.blocks.spiWrite":"SPI %1 写入 %2","esp32.blocks.spiRead":"SPI %1 读取 %2 字节","esp32.blocks.i2cInit":"初始化I2C SDA:%1 SCL:%2 频率:%3Hz","esp32.blocks.i2cScan":"I2C扫描设备","esp32.blocks.i2cWrite":"I2C写入到 %1:%2","esp32.blocks.i2cRead":"I2C从 %1 读取 %2 字节","esp32.blocks.i2sInit":"初始化I2S BCK:%1 WS:%2 DATA:%3 速率:%4Hz","esp32.blocks.i2sPlay":"I2S播放 %1"};var ce={"esp32.menubar.device":"ESP32","esp32.menubar.device.esp32":"ESP32","esp32.menubar.device.esp32s3":"ESP32-S3","esp32.menubar.device.esp32c3":"ESP32-C3","esp32.menubar.device.esp32c6":"ESP32-C6","esp32.menubar.device.esp32IotBoard":"ESP32 IOT Board","esp32.menubar.device.sync":"同步程式","esp32.menubar.device.download":"通過 USB 下載程式","esp32.menubar.device.downloadBle":"通過藍牙下載程式","esp32.menubar.device.iotboardFirmware":"還原 IOT Borad 出廠固件","esp32.menubar.device.firmware":"還原固件","esp32.menubar.device.erasing":"正在清除…","esp32.menubar.device.restoring":"正在還原固件…{progress}%","esp32.menubar.device.recovering":"恢復設備…","esp32.menubar.device.restoreDone":"還原固件完成，請按下 RESET 鍵。","esp32.menubar.device.caching":"正在緩存最新固件…","esp32.extension.tags.controllers":"輸入模組","esp32.extension.tags.sensors":"傳感器","esp32.extension.tags.actuators":"執行器","esp32.extension.tags.displays":"顯示模組","esp32.extension.tags.modules":"智能模組","esp32.extension.tags.communication":"通訊","esp32.extension.tags.data":"數據","esp32.extension.tags.kits":"套件","esp32.blocks.wait":"等待 %1 毫秒","esp32.blocks.break":"跳出重複","esp32.blocks.continue":"跳到下一次","esp32.blocks.elseif":"否則，如果 %1 那麼","esp32.blocks.else":"否則","esp32.blocks.runtime":"運行時長 %1","esp32.blocks.runtimeMilliseconds":"毫秒","esp32.blocks.runtimeSeconds":"秒","esp32.blocks.dataConvert":"將 %1 類型轉為 %2","esp32.blocks.dataConvert.int":"整數","esp32.blocks.dataConvert.float":"浮點數","esp32.blocks.dataConvert.string":"字符串","esp32.blocks.dataConvert.list":"列表","esp32.blocks.dataLengthOf":"%1 長度","esp32.blocks.dataConstrain":"約束 %1 在 %2 和 %3 之間","esp32.blocks.dataMap":"映射 %1 從 %2 - %3 到 %4 - %5","esp32.blocks.whenstart":"當 {name} 開始","esp32.blocks.timerset":"將定時器 # %1 間隔設為每 %2 毫秒","esp32.blocks.timeroff":"關閉定時器 # %1","esp32.blocks.operatorLarger":"%1 和 %2 之中最大","esp32.blocks.operatorSmaller":"%1 和 %2 之中最小","esp32.blocks.pin":"引腳","esp32.blocks.setmode":"將引腳 %1 設為 %2 模式","esp32.blocks.inputMode":"輸入","esp32.blocks.ouputMode":"輸出","esp32.blocks.inputPullUpMode":"上拉輸入","esp32.blocks.inputPullDownMode":"下拉輸入","esp32.blocks.setdigital":"將引腳 %1 設為 %2","esp32.blocks.digitalHigh":"高電平","esp32.blocks.digitalLow":"低電平","esp32.blocks.setpwmfreq":"將引腳 %1 PWM 頻率設為 %2","esp32.blocks.setpwm":"將引腳 %1 PWM 設為 %2","esp32.blocks.setanalog":"將引腳 %1 模擬值設為 %2","esp32.blocks.isDigitalHigh":"引腳 %1 是高電平？","esp32.blocks.analogValue":"引腳 %1 模擬值","esp32.blocks.attachinterrupt":"將引腳 %1 中斷模式設為 %2","esp32.blocks.interruptRising":"電平上升","esp32.blocks.interruptFalling":"電平下降","esp32.blocks.interruptChange":"電平改變","esp32.blocks.interruptHigh":"高電平","esp32.blocks.interruptLow":"低電平","esp32.blocks.detachinterrupt":"取消引腳 %1 中斷","esp32.blocks.network":"網絡通訊","esp32.blocks.protocols":"數據協議","esp32.blocks.serial":"串口","esp32.blocks.serialBaudrate":"將波特率設為 %1","esp32.blocks.serialTimeout":"將超時設為 %1 毫秒","esp32.blocks.serialPrint":"用 %2 模式打印 %1","esp32.blocks.serialPrintWarp":"換行","esp32.blocks.serialPrintNoWarp":"不換行","esp32.blocks.serialPrintHEX":"16進制","esp32.blocks.serialPrintNumber":"打印 %1","esp32.blocks.serialAvailable":"存在可讀取數據?","esp32.blocks.serialAvailableLength":"可讀取數據長度","esp32.blocks.serialReadString":"讀取文本","esp32.blocks.serialReadStringUntil":"讀取文本直到 %1","esp32.blocks.serialReadParse":"讀取 %1","esp32.blocks.serialReadParseInteger":"整數","esp32.blocks.serialReadParseFloat":"浮點數","esp32.blocks.serialRead":"讀取 1 個字節","esp32.blocks.serialReadBytes":"讀取 %1 個字節","esp32.blocks.text":"文本","esp32.blocks.textEquals":"%1 和 %2 相同（忽視大小寫）？","esp32.blocks.textRemove":"刪除 %3 從第 %1 個到第 %2 個字符","esp32.blocks.textReplace":"將 %2 中的 %1 替換為 %3","esp32.blocks.textReplaceLetter":"將 %2 中的第 %1 個字符替換為 %3","esp32.blocks.textSubstring":"截取 %1 從第 %2 個到第 %3 個字符","esp32.blocks.textWith":"%1 %2 %3?","esp32.blocks.textStartsWith":"開始於","esp32.blocks.textEndsWith":"結束於","esp32.blocks.textCase":"將 %2 字母轉為 %1","esp32.blocks.textLowerCase":"小寫","esp32.blocks.textUpperCase":"大寫","esp32.blocks.textTrim":"清除 %1 前後空白字符","esp32.blocks.textConvert":"將 %1 轉為 %2","esp32.blocks.textConvertFrom":"將 %1 轉為文本","esp32.blocks.connectWifi":"連接 Wi-Fi 網絡 SSID: %1 密碼: %2","esp32.blocks.disconnectWifi":"斷開 Wi-Fi 網絡","esp32.blocks.isWifiConnected":"Wi-Fi 網絡已連接？","esp32.blocks.wifiScan":"開始掃描 Wi-Fi","esp32.blocks.wifiItem":"第 %1 個可用 Wi-Fi 的 %2","esp32.blocks.wifiItemSsid":"SSID","esp32.blocks.wifiItemMac":"MAC","esp32.blocks.wifiItemRssi":"RSSI","esp32.blocks.wifiItemSecurity":"加密類型","esp32.blocks.wifiCounts":"可用 Wi-Fi 數量","esp32.blocks.startap":"開啟 AP SSID: %1","esp32.blocks.stopap":"關閉 AP","esp32.blocks.espnowSend":"發送 ESP-Now 消息 %1 到 %2","esp32.blocks.espnowRecv":"等待 ESP-Now 接收消息","esp32.blocks.espnowMsg":"接受到 %1","esp32.blocks.espnowMsgText":"消息","esp32.blocks.espnowMsgMac":"MAC","esp32.blocks.espnowRepeat":"重複等待 ESP-Now 接收消息","esp32.blocks.spiInit":"初始化SPI %1 頻率:%2Hz","esp32.blocks.spiHSPI":"HSPI","esp32.blocks.spiVSPI":"VSPI","esp32.blocks.spiWrite":"SPI %1 寫入 %2","esp32.blocks.spiRead":"SPI %1 讀取 %2 位元組","esp32.blocks.i2cInit":"初始化I2C SDA:%1 SCL:%2 頻率:%3Hz","esp32.blocks.i2cScan":"I2C掃描設備","esp32.blocks.i2cWrite":"I2C寫入到 %1:%2","esp32.blocks.i2cRead":"I2C從 %1 讀取 %2 位元組","esp32.blocks.i2sInit":"初始化I2S BCK:%1 WS:%2 DATA:%3 速率:%4Hz","esp32.blocks.i2sPlay":"I2S播放 %1"};je({en:le,"zh-Hans":pe,"zh-Hant":ce});import{svgAsDataUri as xt}from"@blockcode/utils";import{ScratchBlocks as x,blocksTab as Lt,CodeReview as $t}from"@blockcode/blocks";import{codeTab as Vt,terminalTab as Ft}from"@blockcode/code";import{useCallback as Te}from"preact/hooks";import{useAppContext as it,useProjectContext as nt}from"@blockcode/core";import{MicroPythonGenerator as rt,BlocksEditor as at}from"@blockcode/blocks";import{translate as u,themeColors as H}from"@blockcode/core";import{keyMirror as et}from"@blockcode/utils";var c=et({ESP32:null,ESP32S2:null,ESP32S3:null,ESP32C3:null,ESP32C5:null,ESP32C6:null,ESP32_IOT_BOARD:null});var ue=(e)=>{let t=e===c.ESP32S3,s=t?"ESP32S3_PINS":"ESP32_PINS",o=t?"ESP32S3_PINS":"ESP32_PWM_PINS",n=t?"ESP32S3_ADC_PINS":"ESP32_ADC_PINS";return{id:"pin",name:u("esp32.blocks.pin","Pins"),themeColor:H.blocks.motion.primary,inputColor:H.blocks.motion.secondary,otherColor:H.blocks.motion.tertiary,order:0,blocks:[{id:"setmode",text:u("esp32.blocks.setmode","set pin %1 mode to %2"),inputs:{PIN:{menu:s},MODE:{menu:[[u("esp32.blocks.ouputMode","output"),"OUTPUT"],[u("esp32.blocks.inputMode","input"),"INPUT"],[u("esp32.blocks.inputPullUpMode","input pull-up"),"INPUT_PULLUP"],[u("esp32.blocks.inputPullDownMode","input pull-down"),"INPUT_PULLDOWN"]]}},mpy(i){let a=i.getFieldValue("PIN")||0,r=`pin_${a}`,l=i.getFieldValue("MODE")||"OUTPUT";this.definitions_.import_pin="from machine import Pin";let p="";if(l==="INPUT")p=`${r} = Pin(${a}, Pin.IN)`;else if(l==="INPUT_PULLUP")p=`${r} = Pin(${a}, Pin.IN, Pin.PULL_UP)`;else if(l==="INPUT_PULLDOWN")p=`${r} = Pin(${a}, Pin.IN, Pin.PULL_DOWN)`;else p=`${r} = Pin(${a}, Pin.OUT)`;return this.definitions_[r]=p,""}},"---",{id:"setdigital",text:u("esp32.blocks.setdigital","set pin %1 to %2"),inputs:{PIN:{menu:s},VALUE:{inputMode:!0,type:"integer",defaultValue:"1",menu:[[u("esp32.blocks.digitalHigh","high"),"1"],[u("esp32.blocks.digitalLow","low"),"0"]]}},mpy(i){let a=i.getFieldValue("PIN")||0,r=`pin_${a}`,l=this.valueToCode(i,"VALUE",this.ORDER_NONE);return this.definitions_.import_pin="from machine import Pin",this.definitions_[r]=this.definitions_[r]??`${r} = Pin(${a}, Pin.OUT)`,`${r}.value(${l})
`}},...e===c.ESP32_IOT_BOARD||e===c.ESP32?[{id:"setDAC",text:u("esp32.blocks.setanalog","set pin %1 analog to %2"),inputs:{PIN:{menu:"ESP32_DAC_PINS"},VALUE:{shadow:"slider255"}},mpy(i){let a=i.getFieldValue("PIN")||0,r=`pin_${a}`,l=this.valueToCode(i,"VALUE",this.ORDER_NONE);return this.definitions_.import_pin="from machine import Pin",this.definitions_.import_dac="from machine import DAC",this.definitions_[r]=`${r} = DAC(Pin(${a}))`,`${r}.write(${l})
`}},{id:"slider255",shadow:!0,output:"integer",inputs:{VALUE:{type:"slider",min:0,max:255,step:1,defaultValue:128}},mpy(i){return[i.getFieldValue("VALUE")||0,this.ORDER_ATOMIC]}}]:[],{id:"digital",text:u("esp32.blocks.isDigitalHigh","pin %1 is high?"),output:"boolean",inputs:{PIN:{menu:s}},mpy(i){let a=i.getFieldValue("PIN")||0,r=`pin_${a}`;return this.definitions_.import_pin="from machine import Pin",this.definitions_[r]=`${r} = Pin(${a}, Pin.IN)`,[`(${r}.value() == 1)`,this.ORDER_RELATIONAL]}},{id:"analog",text:u("esp32.blocks.analogValue","pin %1 analog value"),output:"integer",inputs:{PIN:{menu:n}},mpy(i){let a=i.getFieldValue("PIN")||0,r=`pin_${a}`;return this.definitions_.import_pin="from machine import Pin",this.definitions_.import_adc="from machine import ADC",this.definitions_[r]=`${r} = ADC(Pin(${a}))`,this.definitions_[`${r}_atten`]=`${r}.atten(ADC.ATTN_11DB)`,this.definitions_[`${r}_width`]=`${r}.width(ADC.WIDTH_10BIT)`,[`${r}.read()`,this.ORD_FUNCTION_CALL]}},"---",{id:"setPWMFreq",text:u("esp32.blocks.setpwmfreq","set pin %1 pwm frequency to %2 Hz"),inputs:{PIN:{menu:o},FREQ:{type:"integer",defaultValue:"1000"}},mpy(i){let a=i.getFieldValue("PIN")||0,r=`pin_${a}`,l=this.valueToCode(i,"FREQ",this.ORDER_NONE);return this.definitions_.import_pin="from machine import Pin",this.definitions_.import_pwm="from machine import PWM",this.definitions_[r]=`${r} = PWM(Pin(${a}), freq=1000)`,`${r}.freq(${l})
`}},{id:"setPWM",text:u("esp32.blocks.setpwm","set pin %1 pwm to %2"),inputs:{PIN:{menu:o},VALUE:{shadow:"slider1023"}},mpy(i){let a=i.getFieldValue("PIN")||0,r=`pin_${a}`,l=this.valueToCode(i,"VALUE",this.ORDER_NONE);return this.definitions_.import_pin="from machine import Pin",this.definitions_.import_pwm="from machine import PWM",this.definitions_[r]=`${r} = PWM(Pin(${a}), freq=1000)`,`${r}.duty(${l})
`}},{id:"slider1023",shadow:!0,output:"integer",inputs:{VALUE:{type:"slider",min:0,max:1023,step:1,defaultValue:512}},mpy(i){return[i.getFieldValue("VALUE")||0,this.ORDER_ATOMIC]}},"---",{id:"attachinterrupt",text:u("esp32.blocks.attachinterrupt","attach pin %1 interrupt to %2"),substack:!0,inputs:{PIN:{menu:s},INTERRUPT:{menu:[[u("esp32.blocks.interruptRising","rising"),"RISING"],[u("esp32.blocks.interruptFalling","falling"),"FALLING"],[u("esp32.blocks.interruptChange","change"),"CHANGE"],[u("esp32.blocks.interruptHigh","high"),"HIGH"],[u("esp32.blocks.interruptLow","low"),"LOW"]]}},mpy(i){let a=i.getFieldValue("PIN")||0,r=`pin_${a}`,l=`interrupt_${a}_flag`,p=i.getFieldValue("INTERRUPT")||"RISING";this.definitions_.import_pin="from machine import Pin",this.definitions_[r]=this.definitions_[r]??`${r} = Pin(${a}, Pin.IN)`,this.definitions_[l]=`${l} = asyncio.ThreadSafeFlag()`;let f=this.statementToCode(i,"SUBSTACK")||this.PASS,w="";w+=`while True:
`,w+=`${this.INDENT}await ${l}.wait()
`,w+=f,f=this.prefixLines(w,this.INDENT),f=this.addEventTrap(f,i.id),w=`@_tasks__.append
`,w+=f,this.definitions_[`interrupt_${a}`]=w;let Je={RISING:"Pin.IRQ_RISING",FALLING:"Pin.IRQ_FALLING",CHANGE:"Pin.IRQ_RISING | Pin.IRQ_FALLING",HIGH:"Pin.IRQ_HIGH_LEVEL",LOW:"Pin.IRQ_LOW_LEVEL"}[p]||"Pin.IRQ_RISING";return`${r}.irq(trigger=${Je}, handler=lambda _: ${l}.set())
`}},{id:"detachinterrupt",text:u("esp32.blocks.detachinterrupt","detach pin %1 interrupt"),inputs:{PIN:{menu:s}},mpy(i){return`pin_${i.getFieldValue("PIN")||0}.irq(handler=None)
`}}],menus:{ESP32_PINS:{items:[["0","0"],["1","1"],["2","2"],["3","3"],["4","4"],["5","5"],["6","6"],["7","7"],["8","8"],["9","9"],["10","10"],["11","11"],["12","12"],["13","13"],["14","14"],["15","15"],["16","16"],["17","17"],["18","18"],["19","19"],["21","21"],["22","22"],["23","23"],["25","25"],["26","26"],["27","27"],["32","32"],["33","33"],["34","34"],["35","35"],["36","36"],["39","39"]]},ESP32S3_PINS:{items:[["0","0"],["1","1"],["2","2"],["3","3"],["4","4"],["5","5"],["6","6"],["7","7"],["8","8"],["9","9"],["10","10"],["11","11"],["12","12"],["13","13"],["14","14"],["15","15"],["16","16"],["17","17"],["18","18"],["19","19"],["20","20"],["21","21"],["35","35"],["36","36"],["37","37"],["38","38"],["39","39"],["40","40"],["41","41"],["42","42"],["43","43"],["44","44"],["45","45"],["46","46"],["47","47"],["48","48"]]},ESP32_PWM_PINS:{items:[["0","0"],["1","1"],["2","2"],["3","3"],["4","4"],["5","5"],["6","6"],["7","7"],["8","8"],["9","9"],["10","10"],["11","11"],["12","12"],["13","13"],["14","14"],["15","15"],["16","16"],["17","17"],["18","18"],["19","19"],["21","21"],["22","22"],["23","23"],["25","25"],["26","26"],["27","27"],["32","32"],["33","33"]]},ESP32_ADC_PINS:{items:[["0","0"],["2","2"],["4","4"],["12","12"],["13","13"],["14","14"],["15","15"],["25","25"],["26","26"],["27","27"],["32","32"],["33","33"],["34","34"],["35","35"],["36","36"],["37","37"],["38","38"],["39","39"]]},ESP32S3_ADC_PINS:{items:[["1","1"],["2","2"],["3","3"],["4","4"],["5","5"],["6","6"],["7","7"],["8","8"],["9","9"],["10","10"],["11","11"],["12","12"],["13","13"],["14","14"],["15","15"],["16","16"],["17","17"],["18","18"],["19","19"],["20","20"]]},ESP32_DAC_PINS:{items:[["17","17"],["18","18"]]}}}};import{translate as R,themeColors as Y}from"@blockcode/core";import{ScratchBlocks as L}from"@blockcode/blocks";var de=()=>({id:"text",name:R("esp32.blocks.text","Text"),themeColor:Y.blocks.looks.primary,inputColor:Y.blocks.looks.secondary,otherColor:Y.blocks.looks.tertiary,order:1,blocks:[{id:"join",text:L.Msg.OPERATORS_JOIN,output:"string",inputs:{STRING1:{type:"string",defaultValue:"hello"},STRING2:{type:"string",defaultValue:"esp32"}},mpy(e){let t=this.valueToCode(e,"STRING1",this.ORDER_NONE),s=this.valueToCode(e,"STRING2",this.ORDER_NONE);return[`(${t} + ${s})`,this.ORDER_ADDITION]}},{id:"letter_of",text:L.Msg.OPERATORS_LETTEROF,output:"string",inputs:{LETTER:{type:"integer",defaultValue:1},STRING:{type:"string",defaultValue:"esp32"}},mpy(e){let t=this.getAdjusted(e,"LETTER");return[`${this.valueToCode(e,"STRING",this.ORDER_NONE)}[${t}]`,this.ORDER_FUNCTION_CALL]}},{id:"length",text:L.Msg.OPERATORS_LENGTH,output:"number",inputs:{STRING:{type:"string",defaultValue:"esp32"}},mpy(e){return[`len(${this.valueToCode(e,"STRING",this.ORDER_NONE)})`,this.ORDER_FUNCTION_CALL]}},{id:"contains",text:L.Msg.OPERATORS_CONTAINS,output:"boolean",inputs:{STRING1:{type:"string",defaultValue:"esp32"},STRING2:{type:"string",defaultValue:"e"}},mpy(e){let t=this.valueToCode(e,"STRING1",this.ORDER_NONE);return[`(${this.valueToCode(e,"STRING2",this.ORDER_NONE)} in ${t})`,this.ORDER_EQUALITY]}},{id:"equals",text:R("esp32.blocks.textEquals","%1 equals %2 (not case-sensitive)?"),output:"boolean",inputs:{STRING1:{type:"string",defaultValue:"esp32"},STRING2:{type:"string",defaultValue:"ESP32"}},mpy(e){let t=this.valueToCode(e,"STRING1",this.ORDER_NONE),s=this.valueToCode(e,"STRING2",this.ORDER_NONE);return[`${t}.lower() == ${s}.lower()`,this.ORDER_EQUALITY]}},"---",{id:"remove",text:R("esp32.blocks.textRemove","remove letters from %1 to %2 of %3"),inputs:{FROM:{type:"integer",defaultValue:1},TO:{type:"integer",defaultValue:2},STRING:{type:"string",defaultValue:"esp32"}},mpy(e){let t=this.getAdjusted(e,"FROM"),s=this.valueToCode(e,"TO",this.ORDER_NONE),o=this.valueToCode(e,"STRING",this.ORDER_NONE);return`${o}[:${t}] + ${o}[${s}:]
`}},{id:"replace",text:R("esp32.blocks.textReplace","replace %1 of %2 with %3"),inputs:{STRING1:{type:"string",defaultValue:"a"},STRING2:{type:"string",defaultValue:"esp32"},STRING3:{type:"string",defaultValue:"The A"}},mpy(e){let t=this.valueToCode(e,"STRING1",this.ORDER_NONE),s=this.valueToCode(e,"STRING2",this.ORDER_NONE),o=this.valueToCode(e,"STRING3",this.ORDER_NONE);return`${s}.replace(${t}, ${o})
`}},{id:"replace_letter",text:R("esp32.blocks.textReplaceLetter","replace letter %1 of %2 with %3"),inputs:{INDEX:{type:"integer",defaultValue:1},STRING:{type:"string",defaultValue:"esp32"},LETTER:{type:"string",defaultValue:"A"}},mpy(e){let t=this.getAdjusted(e,"INDEX"),s=this.valueToCode(e,"STRING",this.ORDER_NONE),o=this.valueToCode(e,"LETTER",this.ORDER_NONE);return`${s}[:${t}] + ${o} + ${s}[${t+1}:]
`}},{id:"substring",text:R("esp32.blocks.textSubstring","substring of %1 from %2 to %3"),output:"string",inputs:{STRING:{type:"string",defaultValue:"esp32"},FROM:{type:"integer",defaultValue:5},TO:{type:"integer",defaultValue:7}},mpy(e){let t=this.getAdjusted(e,"FROM"),s=this.valueToCode(e,"TO",this.ORDER_NONE);return[`${this.valueToCode(e,"STRING",this.ORDER_NONE)}[${t}:${s}]`,this.ORDER_FUNCTION_CALL]}},{id:"with",text:R("esp32.blocks.textWith","%1 %2 with %3 ?"),output:"boolean",inputs:{STRING1:{type:"string",defaultValue:"esp32"},WITH:{type:"string",menu:[[R("esp32.blocks.textStartsWith","starts"),"START"],[R("esp32.blocks.textEndsWith","ends"),"END"]]},STRING2:{type:"string",defaultValue:"a"}},mpy(e){let t=this.valueToCode(e,"STRING1",this.ORDER_NONE),s=this.valueToCode(e,"STRING2",this.ORDER_NONE),n=(e.getFieldValue("WITH")||"START")==="START"?"startswith":"endswith";return[`${t}.${n}(${s})`,this.ORDER_FUNCTION_CALL]}},"---",{id:"case",text:R("esp32.blocks.textCase","get %1 case of %2"),inputs:{WITH:{menu:[[R("esp32.blocks.textLowerCase","lower"),"LOWER"],[R("esp32.blocks.textUpperCase","upper"),"UPPER"]]},STRING:{type:"string",defaultValue:"ESP32"}},mpy(e){let t=e.getFieldValue("WITH")||"LOWER";return`${this.valueToCode(e,"STRING",this.ORDER_NONE)}.${t==="LOWER"?"lower":"upper"}()
`}},{id:"trim",text:R("esp32.blocks.textTrim","remove %1 leading and trailing whitespace"),inputs:{STRING:{type:"string",defaultValue:"esp32"}},mpy(e){return`${this.valueToCode(e,"STRING",this.ORDER_NONE)}.strip()
`}},"---",{id:"convert",text:R("esp32.blocks.textConvert","convert %1 to %2"),output:!0,inputs:{STRING:{type:"string",defaultValue:"a"},TYPE:{menu:[[R("esp32.blocks.dataConvert.int","int"),"int"],[R("esp32.blocks.dataConvert.float","float"),"float"],[R("esp32.blocks.dataConvert.list","list"),"list"]]}},mpy(e){let t=this.valueToCode(e,"STRING",this.ORDER_NONE);return[`${e.getFieldValue("TYPE")||"int"}(${t})`,this.ORDER_FUNCTION_CALL]}},{id:"convert_from",text:R("esp32.blocks.textConvertFrom","convert %1 to String"),output:!0,inputs:{NUM:{type:"number",defaultValue:1}},mpy(e){return[`str(${this.valueToCode(e,"NUM",this.ORDER_NONE)})`,this.ORDER_FUNCTION_CALL]}}]});import{translate as h,themeColors as z}from"@blockcode/core";var me=()=>({id:"serial",name:h("esp32.blocks.serial","Serial"),themeColor:z.blocks.sounds.primary,inputColor:z.blocks.sounds.secondary,otherColor:z.blocks.sounds.tertiary,order:2,blocks:[{id:"baudrate",text:h("esp32.blocks.serialBaudrate","set baudrate to %1"),inputs:{BAUDRATE:{menu:{inputMode:!0,type:"integer",defaultValue:"115200",items:["4800","9600","38400","57600","115200"]}}},mpy(e){let t=this.valueToCode(e,"BAUDRATE",this.ORDER_NONE);return this.definitions_.import_uart="from machine import UART",this.definitions_.uart="uart = UART(0)",`uart.init(${t})
`}},{id:"timeout",text:h("esp32.blocks.serialTimeout","set timeout to %1 milliseconds"),inputs:{TIMEOUT:{type:"integer",defaultValue:1000}},mpy(e){let t=this.valueToCode(e,"TIMEOUT",this.ORDER_NONE);return this.definitions_.import_uart="from machine import UART",this.definitions_.uart="uart = UART(0)",`uart.timeout = ${t} / 1000
`}},"---",{id:"print",text:h("esp32.blocks.serialPrint","print %1 with %2"),inputs:{STRING:{type:"string",defaultValue:"hello"},MODE:{menu:[[h("esp32.blocks.serialPrintWarp","warp"),"WARP"],[h("esp32.blocks.serialPrintNoWarp","no-warp"),"NOWARP"],[h("esp32.blocks.serialPrintHEX","hex"),"HEX"]]}},mpy(e){let t=this.valueToCode(e,"STRING",this.ORDER_NONE),s=e.getFieldValue("MODE")||"WARP";if(this.definitions_.import_uart="from machine import UART",this.definitions_.uart="uart = UART(0)",s==="WARP")return`uart.write(${t} + '\\n')
`;else if(s==="NOWARP")return`uart.write(${t})
`;else if(s==="HEX")return`uart.write(hex(${t}))
`}},{id:"print_number",text:h("esp32.blocks.serialPrintNumber","print %1"),inputs:{NUM:{type:"number",defaultValue:0}},mpy(e){let t=this.valueToCode(e,"NUM",this.ORDER_NONE);return this.definitions_.import_uart="from machine import UART",this.definitions_.uart="uart = UART(0)",`uart.write(str(${t}) + '
')
`}},"---",{id:"available",text:h("esp32.blocks.serialAvailable","available data?"),output:"boolean",mpy(e){return this.definitions_.import_uart="from machine import UART",this.definitions_.uart="uart = UART(0)",["uart.any() > 0",this.ORDER_RELATIONAL]}},{id:"available_length",text:h("esp32.blocks.serialAvailableLength","available data length"),output:"number",mpy(e){return this.definitions_.import_uart="from machine import UART",this.definitions_.uart="uart = UART(0)",["uart.any()",this.ORDER_FUNCTION_CALL]}},"---",{id:"read_string",text:h("esp32.blocks.serialReadString","read a string"),output:"string",mpy(e){return this.definitions_.import_uart="from machine import UART",this.definitions_.uart="uart = UART(0)",["uart.read().decode('utf-8')",this.ORDER_FUNCTION_CALL]}},{id:"read_string_until",text:h("esp32.blocks.serialReadStringUntil","read a string until %1"),output:"string",inputs:{CHAR:{type:"string",defaultValue:"a"}},mpy(e){let t=this.valueToCode(e,"CHAR",this.ORDER_NONE);return this.definitions_.import_uart="from machine import UART",this.definitions_.uart="uart = UART(0)",[`uart.readuntil(${t}).decode('utf-8')`,this.ORDER_FUNCTION_CALL]}},"---",{id:"read_parse",text:h("esp32.blocks.serialReadParse","read a %1 number"),output:"number",inputs:{TYPE:{menu:[[h("esp32.blocks.serialReadParseInteger","int"),"INT"],[h("esp32.blocks.serialReadParseFloat","float"),"FLOAT"]]}},mpy(e){let t=e.getFieldValue("TYPE")||"INT";if(this.definitions_.import_uart="from machine import UART",this.definitions_.uart="uart = UART(0)",t==="INT")return["int(uart.read())",this.ORDER_FUNCTION_CALL];else if(t==="FLOAT")return["float(uart.read())",this.ORDER_FUNCTION_CALL]}},"---",{id:"read",text:h("esp32.blocks.serialRead","read a byte"),output:!0,mpy(e){return this.definitions_.import_uart="from machine import UART",this.definitions_.uart="uart = UART(0)",["uart.read(1)",this.ORDER_FUNCTION_CALL]}},{id:"read_bytes",text:h("esp32.blocks.serialReadBytes","read %1 bytes"),output:!0,inputs:{LEN:{type:"integer",defaultValue:2}},mpy(e){let t=this.valueToCode(e,"LEN",this.ORDER_NONE);return this.definitions_.import_uart="from machine import UART",this.definitions_.uart="uart = UART(0)",[`uart.read(${t})`,this.ORDER_FUNCTION_CALL]}}]});import{translate as I,themeColors as X}from"@blockcode/core";var Re=(e)=>{let t=I("esp32.menubar.device.esp32","ESP32");switch(e){case c.ESP32S3:t=I("esp32.menubar.device.esp32s3","ESP32-S3");break;case c.ESP32C3:t=I("esp32.menubar.device.esp32c3","ESP32-C3");break;case c.ESP32_IOT_BOARD:t=I("esp32.menubar.device.esp32IotBoard","ESP32 IOT Board");break}let s=["1","2","3","4"];return{id:"event",name:"%{BKY_CATEGORY_EVENTS}",themeColor:X.blocks.events.primary,inputColor:X.blocks.events.secondary,otherColor:X.blocks.events.tertiary,blocks:[{id:"whenstart",text:I("esp32.blocks.whenstart","when {name} start",{name:t}),hat:!0,mpy(o){let n=this.statementToCode(o)||this.PASS;n=this.addEventTrap(n,o.id);let i="";return i+=`@_tasks__.append
`,i+=n,i}},"---",{id:"timerset",text:I("esp32.blocks.timerset","set timer # %1 per %2 milliseconds"),substack:!0,inputs:{ID:{menu:s},PERIOD:{type:"integer",defaultValue:500}},mpy(o){let n=this.valueToCode(o,"PERIOD",this.ORDER_NONE)||500,i=parseInt(o.getFieldValue("ID")||"1",10)-1;if(i<0)i=0;let a=`timer_${i}`,r=`period_${i}_flag`;this.definitions_.import_timer="from machine import Timer",this.definitions_[a]=`${a} = Timer(${i})`,this.definitions_[r]=`${r} = asyncio.ThreadSafeFlag()`;let l=this.statementToCode(o,"SUBSTACK")||this.PASS,p="";return p+=`while True:
`,p+=`${this.INDENT}await ${r}.wait()
`,p+=l,l=this.prefixLines(p,this.INDENT),l=this.addEventTrap(l,o.id),p=`@_tasks__.append
`,p+=l,this.definitions_[`period_${i}`]=p,`${a}.init(mode=Timer.PERIODIC, period=${n}, callback=lambda _: ${r}.set())
`}},{id:"timeroff",text:I("esp32.blocks.timeroff","stop timer # %1"),inputs:{ID:{menu:s}},mpy(o){let n=parseInt(o.getFieldValue("ID")||"1",10)-1;if(n<0)n=0;return`timer_${n}.deinit()
`}}]}};import{translate as N,themeColors as q}from"@blockcode/core";import{ScratchBlocks as P}from"@blockcode/blocks";var he=()=>({id:"control",name:"%{BKY_CATEGORY_CONTROL}",themeColor:q.blocks.control.primary,inputColor:q.blocks.control.secondary,otherColor:q.blocks.control.tertiary,blocks:[{id:"wait",text:N("esp32.blocks.wait","wait %1 milliseconds"),inputs:{MS:{type:"integer",defaultValue:1000}},mpy(e){return`await asyncio.sleep_ms(${this.valueToCode(e,"MS",this.ORDER_NONE)})
`}},{id:"forever",text:P.Msg.CONTROL_FOREVER,repeat:!0,end:!0},"---",{id:"repeat",text:P.Msg.CONTROL_REPEAT,repeat:!0,inputs:{TIMES:{type:"integer",defaultValue:10}}},"---",{id:"if",text:P.Msg.CONTROL_IF,substack:!0,inputs:{CONDITION:{type:"boolean"}}},{id:"elseif",text:N("esp32.blocks.elseif","else if %1 then"),substack:!0,inputs:{CONDITION:{type:"boolean"}},mpy(e){let t=this.valueToCode(e,"CONDITION",this.ORDER_NONE)||"False",s=this.statementToCode(e,"SUBSTACK")||this.PASS,o="";return o+=`elif ${t}:
`,o+=s,o}},{id:"else",text:N("esp32.blocks.else","else"),substack:!0,mpy(e){let t=this.statementToCode(e,"SUBSTACK")||this.PASS,s="";return s+=`else:
`,s+=t,s}},"---",{id:"repeat_until",text:P.Msg.CONTROL_REPEATUNTIL,repeat:!0,inputs:{CONDITION:{type:"boolean"}}},{id:"while",text:P.Msg.CONTROL_WHILE,repeat:!0,inputs:{CONDITION:{type:"boolean"}}},{id:"continue",text:N("esp32.blocks.continue","continue"),end:!0,mpy(e){return`continue
`}},{id:"break",text:N("esp32.blocks.break","break"),end:!0,mpy(e){return`break
`}},"---",{id:"runtime",text:N("esp32.blocks.runtime","run time %1"),output:"number",inputs:{UNIT:{menu:[[N("esp32.blocks.runtimeMilliseconds","milliseconds"),"MS"],[N("esp32.blocks.runtimeSeconds","seconds"),"SEC"]]}},ino(e){return[`(_times__${e.getFieldValue("UNIT")==="SEC"?"/1000":""})`,this.ORDER_ATOMIC]}}]});import{translate as m,themeColors as us}from"@blockcode/core";var be=()=>({id:"network",name:m("esp32.blocks.network","Network"),themeColor:"#28A0DC",inputColor:"#42A8DB",otherColor:"#1386BF",order:6,blocks:[{id:"connectwifi",text:m("esp32.blocks.connectWifi","connect wifi ssid: %1 password: %2"),inputs:{SSID:{type:"string",defaultValue:"esp32"},PASSWORD:{type:"string",defaultValue:"12345678"}},mpy(e){this.definitions_.import_threading="import _thread as threading",this.definitions_.import_network="import network",this.definitions_.wlan="wlan = network.WLAN(); wlan.active(True)";let t=this.valueToCode(e,"SSID",this.ORDER_NONE),s=this.valueToCode(e,"PASSWORD",this.ORDER_NONE);t=isNaN(t)?t:this.quote_(t),s=isNaN(s)?s:this.quote_(s);let o="";return o+="if not wlan.isconnected(): threading.start_new_thread(",o+=`lambda: wlan.connect(${t}, ${s}), ())
`,o+="while wlan.active() and not wlan.isconnected(): ",o+=`await asyncio.sleep_ms(500)
`,o}},{id:"disconnect",text:m("esp32.blocks.disconnectWifi","disconnect wifi"),mpy(e){this.definitions_.import_network="import network",this.definitions_.wlan="wlan = network.WLAN(); wlan.active(True)";let t="";return t+=`wlan.disconnect()
`,t+=`wlan.active(False)
`,t}},{id:"isconnected",text:m("esp32.blocks.isWifiConnected","wifi is connected?"),output:"boolean",mpy(e){return this.definitions_.import_network="import network",this.definitions_.wlan="wlan = network.WLAN(); wlan.active(True)",["wlan.isconnected()",this.ORDER_FUNCTION_CALL]}},"---",{id:"wifiscan",text:m("esp32.blocks.wifiScan","start scan wifi"),mpy(e){this.definitions_.import_threading="import _thread as threading",this.definitions_.import_network="import network",this.definitions_.wlan="wlan = network.WLAN(); wlan.active(True)",this.definitions_.wifi_list="wifi_list = []";let t="";return t+="threading.start_new_thread(",t+=`lambda: wifi_list.extend(wlan.scan()), ())
`,t}},{id:"wifiitem",text:m("esp32.blocks.wifiItem","%2 of item %1 of available wifi"),output:"number",inputs:{INDEX:{type:"integer",defaultValue:1},ITEM:{menu:[[m("esp32.blocks.wifiItemSsid","ssid"),"SSID"],[m("esp32.blocks.wifiItemMac","mac"),"MAC"],[m("esp32.blocks.wifiItemRssi","rssi"),"RSSI"],[m("esp32.blocks.wifiItemSecurity","security"),"SECURITY"]]}},mpy(e){let t=this.getAdjusted(e,"INDEX")||0,s=e.getFieldValue("ITEM")||"SSID";this.definitions_.import_network="import network",this.definitions_.wlan="wlan = network.WLAN(); wlan.active(True)",this.definitions_.wifi_list="wifi_list = []";let o=`wifi_list[${t}]`;switch(s){case"MAC":o+="[1]";break;case"RSSI":o+="[3]";break;case"SECURITY":o+="[4]";break;default:o+="[0]";break}return[o,this.ORDER_ATOMIC]}},{id:"wificounts",text:m("esp32.blocks.wifiCounts","available wifi counts"),output:"number",mpy(e){return this.definitions_.import_network="import network",this.definitions_.wlan="wlan = network.WLAN(); wlan.active(True)",this.definitions_.wifi_list="wifi_list = []",["len(wifi_list)",this.ORDER_FUNCTION_CALL]}},"---",{id:"startap",text:m("esp32.blocks.startap","start ap ssid: %1"),inputs:{SSID:{type:"string",defaultValue:"esp-ap"}},mpy(e){let t=this.valueToCode(e,"SSID",this.ORDER_NONE);this.definitions_.import_network="import network",this.definitions_.ap="ap = network.WLAN(network.WLAN.IF_AP)";let s="";return s+=`ap.config(ssid=${t})
`,s+=`ap.active(True)
`,s}},{id:"stopap",text:m("esp32.blocks.stopap","stop ap"),mpy(e){return this.definitions_.import_network="import network",this.definitions_.ap="ap = network.WLAN(network.AP_IF)",`ap.active(False)
`}},"---",{id:"espnowsend",text:m("esp32.blocks.espnowSend","send esp-now message %1 to %2"),inputs:{MESSAGE:{type:"string",defaultValue:"hello"},MAC:{type:"string",defaultValue:"ff:ff:ff:ff:ff:ff"}},mpy(e){let t=this.valueToCode(e,"MESSAGE",this.ORDER_NONE),s=this.valueToCode(e,"MAC",this.ORDER_NONE);this.definitions_.import_network="import network",this.definitions_.import_aioespnow="from aioespnow import AIOESPNow",this.definitions_.wlan="wlan = network.WLAN(); wlan.active(True)",this.definitions_.espnow="espnow = AIOESPNow(); espnow.active(True)";let o="";return o+=`async def espnow_asend(mac, msg):
`,o+=`${this.INDENT}mac_addr = bytes.fromhex(mac.replace(':', ''))
`,o+=`${this.INDENT}try:
`,o+=`${this.INDENT}${this.INDENT}await espnow.asend(mac_addr, msg.encode())
`,o+=`${this.INDENT}except OSError as err:
`,o+=`${this.INDENT}${this.INDENT}if len(err.args) > 1 and err.args[1] == 'ESP_ERR_ESPNOW_NOT_FOUND':
`,o+=`${this.INDENT}${this.INDENT}${this.INDENT}espnow.add_peer(mac_addr)
`,o+=`${this.INDENT}${this.INDENT}${this.INDENT}await espnow.asend(mac_addr, msg.encode())
`,this.definitions_.espnow_asend=o,`await espnow_asend(${s}, ${t})
`}},{id:"espnowrecv",text:m("esp32.blocks.espnowRecv","wait for esp-now incoming"),mpy(e){return this.definitions_.import_network="import network",this.definitions_.import_aioespnow="from aioespnow import AIOESPNow",this.definitions_.wlan="wlan = network.WLAN(); wlan.active(True)",this.definitions_.espnow="espnow = AIOESPNow(); espnow.active(True)",`peer, msg = await espnow.arecv()
`}},{id:"espnowmsg",text:m("esp32.blocks.espnowMsg","%1 of incoming"),output:"string",inputs:{TYPE:{menu:[[m("esp32.blocks.espnowMsgText","message"),"MESSAGE"],[m("esp32.blocks.espnowMsgMac","mac"),"MAC"]]}},mpy(e){let t=e.getFieldValue("TYPE")||"MESSAGE";return this.definitions_.import_network="import network",this.definitions_.import_aioespnow="from aioespnow import AIOESPNow",this.definitions_.wlan="wlan = network.WLAN(); wlan.active(True)",this.definitions_.espnow="espnow = AIOESPNow(); espnow.active(True)",[t==="MAC"?"peer":"msg",this.ORDER_ATOMIC]}},"---",{id:"espnowrepeat",text:m("esp32.blocks.espnowRepeat","repeat wait for esp-now incoming"),repeat:!0,end:!0,mpy(e){this.definitions_.import_network="import network",this.definitions_.import_aioespnow="from aioespnow import AIOESPNow",this.definitions_.wlan="wlan = network.WLAN(); wlan.active(True)",this.definitions_.espnow="espnow = AIOESPNow(); espnow.active(True)";let t=this.statementToCode(e,"SUBSTACK");t=this.addLoopTrap(t,e.id);let s="";return s+=`async for peer, msg in espnow:
`,s+=t,s}}]});import{translate as tt,themeColors as K}from"@blockcode/core";var Ee=()=>({id:"protocol",name:tt("esp32.blocks.protocols","Protocols"),themeColor:K.blocks.sensing.primary,inputColor:K.blocks.sensing.secondary,otherColor:K.blocks.sensing.tertiary,order:5,blocks:[]});import{translate as O,themeColors as Q}from"@blockcode/core";import{ScratchBlocks as d}from"@blockcode/blocks";var ke=()=>({id:"operator",name:"%{BKY_CATEGORY_OPERATORS}",themeColor:Q.blocks.operators.primary,inputColor:Q.blocks.operators.secondary,otherColor:Q.blocks.operators.tertiary,blocks:[{id:"calculate",text:"%1 %2 %3",output:"number",inputs:{NUM1:{type:"number",defaultValue:0},SYMBOL:{menu:[["+","+"],["-","-"],["×","*"],["÷","/"]]},NUM2:{type:"number",defaultValue:0}},mpy(e){let t=this.valueToCode(e,"NUM1",this.ORDER_NONE),s=this.valueToCode(e,"NUM2",this.ORDER_NONE),o=e.getFieldValue("SYMBOL")||"+",n={"+":this.ORDER_ADDITION,"-":this.ORDER_SUBTRACTION,"*":this.ORDER_MULTIPLICATION,"/":this.ORDER_DIVISION};return[`(${t} ${o} ${s})`,n[o]]}},"---",{id:"random",text:d.Msg.OPERATORS_RANDOM,output:"number",inputs:{FROM:{type:"integer",defaultValue:1},TO:{type:"integer",defaultValue:10}},mpy(e){this.definitions_.import_random="import random";let t=this.valueToCode(e,"FROM",this.ORDER_NONE),s=this.valueToCode(e,"TO",this.ORDER_NONE);return[`random.randint(${t}, ${s})`,this.ORDER_FUNCTION_CALL]}},"---",{id:"compare",text:"%1 %2 %3",output:"boolean",inputs:{NUM1:{type:"number",defaultValue:0},SYMBOL:{menu:[[">",">"],["<","<"],["=","=="],["≥",">="],["≤","<="],["≠","!="]]},NUM2:{type:"number",defaultValue:0}},mpy(e){let t=this.valueToCode(e,"NUM1",this.ORDER_NONE),s=this.valueToCode(e,"NUM2",this.ORDER_NONE),o=e.getFieldValue("SYMBOL")||">",n={">":this.ORDER_RELATIONAL,"<":this.ORDER_RELATIONAL,"==":this.ORDER_EQUALITY,">=":this.ORDER_RELATIONAL,"<=":this.ORDER_RELATIONAL,"!=":this.ORDER_EQUALITY};return[`(${t} ${o} ${s})`,n[o]]}},"---",{id:"and",text:d.Msg.OPERATORS_AND,output:"boolean",inputs:{OPERAND1:{type:"boolean"},OPERAND2:{type:"boolean"}},mpy(e){let t=this.valueToCode(e,"OPERAND1",this.ORDER_NONE),s=this.valueToCode(e,"OPERAND2",this.ORDER_NONE);return[`(${t} and ${s})`,this.ORDER_LOGICAL_AND]}},{id:"or",text:d.Msg.OPERATORS_OR,output:"boolean",inputs:{OPERAND1:{type:"boolean"},OPERAND2:{type:"boolean"}},mpy(e){let t=this.valueToCode(e,"OPERAND1",this.ORDER_NONE),s=this.valueToCode(e,"OPERAND2",this.ORDER_NONE);return[`(${t} or ${s})`,this.ORDER_LOGICAL_OR]}},{id:"not",text:d.Msg.OPERATORS_NOT,output:"boolean",inputs:{OPERAND:{type:"boolean"}},mpy(e){return[`(not ${this.valueToCode(e,"OPERAND",this.ORDER_NONE)||"True"})`,this.ORDER_LOGICAL_NOT]}},"---",{id:"bitwise",text:"%1 %2 %3",output:"number",inputs:{NUM1:{type:"integer",defaultValue:0},SYMBOL:{menu:[["&","&"],["|","|"],["^","^"],["<<","<<"],[">>",">>"]]},NUM2:{type:"integer",defaultValue:0}},mpy(e){let t=this.valueToCode(e,"NUM1",this.ORDER_NONE),s=this.valueToCode(e,"NUM2",this.ORDER_NONE),o=e.getFieldValue("SYMBOL")||"&",n={"&":this.ORDER_BITWISE_AND,"|":this.ORDER_BITWISE_OR,"^":this.ORDER_BITWISE_XOR,"<<":this.ORDER_BITWISE_SHIFT,">>":this.ORDER_BITWISE_SHIFT};return[`(${t} ${o} ${s})`,n[o]]}},{id:"bitwise_not",text:"~ %1",output:"number",inputs:{NUM:{type:"integer",defaultValue:0}},mpy(e){return[`(~${this.valueToCode(e,"NUM",this.ORDER_NONE)})`,this.ORDER_BITWISE_NOT]}},"---",{id:"larger",text:O("esp32.blocks.operatorLarger","larger of %1 and %2"),output:"number",inputs:{NUM1:{type:"number",defaultValue:0},NUM2:{type:"number",defaultValue:0}},mpy(e){let t=this.valueToCode(e,"NUM1",this.ORDER_NONE),s=this.valueToCode(e,"NUM2",this.ORDER_NONE);return[`max(${t}, ${s})`,this.ORDER_FUNCTION_CALL]}},{id:"smaller",text:O("esp32.blocks.operatorSmaller","smaller of %1 and %2"),output:"number",inputs:{NUM1:{type:"number",defaultValue:0},NUM2:{type:"number",defaultValue:0}},mpy(e){let t=this.valueToCode(e,"NUM1",this.ORDER_NONE),s=this.valueToCode(e,"NUM2",this.ORDER_NONE);return[`min(${t}, ${s})`,this.ORDER_FUNCTION_CALL]}},{id:"mod",text:d.Msg.OPERATORS_MOD,output:"number",inputs:{NUM1:{type:"integer",defaultValue:0},NUM2:{type:"integer",defaultValue:0}},mpy(e){let t=this.valueToCode(e,"NUM1",this.ORDER_NONE),s=this.valueToCode(e,"NUM2",this.ORDER_NONE);return[`(${t} % ${s})`,this.ORDER_MODULUS]}},{id:"round",text:d.Msg.OPERATORS_ROUND,output:"number",inputs:{NUM:{type:"number",defaultValue:0}},mpy(e){return this.definitions_.import_math="import math",[`round(${this.valueToCode(e,"NUM",this.ORDER_NONE)})`,this.ORDER_FUNCTION_CALL]}},"---",{id:"mathop",text:d.Msg.MATHOP,output:"number",inputs:{OPERATOR:{menu:[[d.Msg.OPERATORS_MATHOP_ABS,"math.fabs"],[d.Msg.OPERATORS_MATHOP_FLOOR,"math.floor"],[d.Msg.OPERATORS_MATHOP_CEILING,"math.ceil"],[d.Msg.OPERATORS_MATHOP_SQRT,"math.sqrt"],[d.Msg.OPERATORS_MATHOP_SIN,"math.sin"],[d.Msg.OPERATORS_MATHOP_COS,"math.cos"],[d.Msg.OPERATORS_MATHOP_TAN,"math.tan"],[d.Msg.OPERATORS_MATHOP_ASIN,"math.asin"],[d.Msg.OPERATORS_MATHOP_ACOS,"math.acos"],[d.Msg.OPERATORS_MATHOP_ATAN,"math.atan"],[d.Msg.OPERATORS_MATHOP_LN,"math.log"],[d.Msg.OPERATORS_MATHOP_LOG,"math.log10"],[d.Msg.OPERATORS_MATHOP_EEXP,"math.exp"],[d.Msg.OPERATORS_MATHOP_10EXP,"pow10"]]},NUM:{type:"integer",defaultValue:0}},mpy(e){this.definitions_.import_math="import math";let t=e.getFieldValue("OPERATOR")||"abs",s=this.valueToCode(e,"NUM",this.ORDER_NONE),o="";if(t==="pow10")o+=`math.pow(10, ${s})`;else o+=`${t}(${s})`;return[o,this.ORDER_FUNCTION_CALL]}},"---",{id:"convert",text:O("esp32.blocks.dataConvert","convert %1 to %2"),output:!0,inputs:{DATA:{type:"string",defaultValue:"3.1415"},TYPE:{menu:[[O("esp32.blocks.dataConvert.int","int"),"int"],[O("esp32.blocks.dataConvert.float","float"),"float"],[O("esp32.blocks.dataConvert.string","str"),"str"],[O("esp32.blocks.dataConvert.list","list"),"list"]]}},mpy(e){let t=this.valueToCode(e,"DATA",this.ORDER_NONE);return[`${e.getFieldValue("TYPE")||"int"}(${t})`,this.ORDER_FUNCTION_CALL]}},"---",{id:"sizeof",text:O("esp32.blocks.dataLengthOf","length of %1"),output:"number",inputs:{DATA:{type:"string",defaultValue:"esp32"}},mpy(e){return[`len(${this.valueToCode(e,"DATA",this.ORDER_NONE)})`,this.ORDER_FUNCTION_CALL]}},"---",{id:"constrain",text:O("esp32.blocks.dataConstrain","constrain %1 between %2 to %3"),output:"number",inputs:{DATA:{type:"integer",defaultValue:0},FROM:{type:"integer",defaultValue:0},TO:{type:"integer",defaultValue:255}},mpy(e){let t=this.valueToCode(e,"DATA",this.ORDER_NONE),s=this.valueToCode(e,"FROM",this.ORDER_NONE),o=this.valueToCode(e,"TO",this.ORDER_NONE);return[`min(max(${t}, ${s}), ${o})`,this.ORDER_FUNCTION_CALL]}},{id:"map",text:O("esp32.blocks.dataMap","map %1 from %2 - %3 to %4 - %5"),output:"number",inputs:{DATA:{type:"integer",defaultValue:0},FROMLOW:{type:"integer",defaultValue:0},FROMHIGH:{type:"integer",defaultValue:1023},TOLOW:{type:"integer",defaultValue:0},TOHIGHT:{type:"integer",defaultValue:255}},mpy(e){let t=this.valueToCode(e,"DATA",this.ORDER_NONE),s=this.valueToCode(e,"FROMLOW",this.ORDER_NONE),o=this.valueToCode(e,"FROMHIGH",this.ORDER_NONE),n=this.valueToCode(e,"TOLOW",this.ORDER_NONE),i=this.valueToCode(e,"TOHIGHT",this.ORDER_NONE);return[`(${t} - ${s}) * (${i} - ${n}) // (${o} - ${s}) + ${n}`,this.ORDER_FUNCTION_CALL]}}]});var Oe=()=>({id:"data",skipXML:!0,blocks:[{id:"setvariableto",mpy(e){let t=this.getVariableName(e.getFieldValue("VARIABLE")),s=this.valueToCode(e,"VALUE",this.ORDER_NONE),o=`${t} = ${s}`;if(e.getRootBlock().type==="event_whensetup")return this.definitions_[`variable_${t}`]=o,"";return o+`
`}},{id:"changevariableby",mpy(e){let t=this.getVariableName(e.getFieldValue("VARIABLE")),s=this.valueToCode(e,"VALUE",this.ORDER_NONE);return`${t} = ${s}
`}},{id:"variable",mpy(e){return[this.getVariableName(e.getFieldValue("VARIABLE")),this.ORDER_ATOMIC]}},{id:"insertatlist",mpy(e){let t="arr"+this.getVariableName(e.getFieldValue("LIST")),s=this.valueToCode(e,"INDEX",this.ORDER_NONE),o=`${t} = [None] * int(${s})`;if(e.getRootBlock().type==="event_whensetup")return this.definitions_[`variable_${t}`]=o,"";return o+`
`}},{id:"replaceitemoflist",mpy(e){let t="arr"+this.getVariableName(e.getFieldValue("LIST")),s=this.valueToCode(e,"ITEM",this.ORDER_NONE),o=this.valueToCode(e,"INDEX",this.ORDER_NONE);return`${t}[int(${o})] = ${s}
`}},{id:"listcontents",mpy(e){return["arr"+this.getVariableName(e.getFieldValue("LIST")),this.ORDER_ATOMIC]}},{id:"itemoflist",mpy(e){let t="arr"+this.getVariableName(e.getFieldValue("LIST")),s=this.valueToCode(e,"INDEX",this.ORDER_NONE);return[`${t}[int(${s})]`,this.ORDER_MEMBER]}},{id:"lengthoflist",mpy(e){return[`len(${"arr"+this.getVariableName(e.getFieldValue("LIST"))})`,this.ORDER_FUNCTION_CALL]}}]});var _e=()=>({id:"procedures",skipXML:!0,blocks:[{id:"definition",mpy(e){let t=e.childBlocks_[0],s=this.getFunctionName(t.getProcCode()),o=this.statementToCode(e)||this.PASS,n=t.childBlocks_.map((a)=>`${this.getVariableName(a.getFieldValue("VALUE"))}`),i="";i+=`async def ${s}(${n.join(", ")}):
`,i+=o,this.definitions_[s]=i}},{id:"call",mpy(e){let t=this.getFunctionName(e.getProcCode()),s=e.argumentIds_.map((n)=>this.valueToCode(e,n,this.ORDER_NONE)||"False"),o=`await ${t}(${s.join(", ")})`;if(e.return_)return[o,this.ORDER_FUNCTION_CALL];return o+`
`}},{id:"return",mpy(e){return`return ${this.valueToCode(e,"VALUE",this.ORDER_NONE)}
`}}]});import{MicroPythonGenerator as st}from"@blockcode/blocks";var ot=`# Generate by BlockCode
`;class $ extends st{constructor(){super("ESP32")}finish(e){return ot+super.finish(e)}}function fe(e){let t=ue(e),s=de(),o=me(),n=Re(e),i=he(),a=be(),r=Ee(),l=ke(),p=Oe(),f=_e();return[t,s,o,n,i,a,r,l,p,f]}import{Text as T}from"@blockcode/core";import{jsx as g}from"preact/jsx-runtime";var Ne=[{tag:"controller",label:g(T,{id:"esp32.extension.tags.controllers",defaultMessage:"Controllers"})},{tag:"sensor",label:g(T,{id:"esp32.extension.tags.sensors",defaultMessage:"Sensors"})},{tag:"actuator",label:g(T,{id:"esp32.extension.tags.actuators",defaultMessage:"Actuators"})},{tag:"display",label:g(T,{id:"esp32.extension.tags.displays",defaultMessage:"Displays"})},{tag:"module",label:g(T,{id:"esp32.extension.tags.modules",defaultMessage:"Modules"})},{tag:"communication",label:g(T,{id:"esp32.extension.tags.communication",defaultMessage:"Communication"})},{tag:"data",label:g(T,{id:"esp32.extension.tags.data",defaultMessage:"Data"})},{tag:"kit",label:g(T,{id:"esp32.extension.tags.kits",defaultMessage:"Kits"})}];import{jsx as ct}from"preact/jsx-runtime";var lt=(e)=>e.replaceAll(/[^a-z0-9]/gi,"_").replace(/^_/,""),ge=new $,pt=()=>[["device","!scratch"],"data"];function Se(){let{tabIndex:e}=it(),{meta:t}=nt(),s=Te(()=>{return fe(t.value.boardType,t.value.classicEvents)},[t.value.boardType,t.value.classicEvents]),o=Te((n,i,a,r)=>{rt.prototype.onDefinitions.call(ge);for(let l in a)for(let p of a[l])if(!p.common)i(`import_${l}_${p.name}`,`from ${lt(l)} import ${p.name}`)},[]);return ct(at,{enableCodePreview:!0,enableProcedureReturns:!0,disableSensingBlocks:!0,disableGenerateCode:e.value!==0,extensionTags:Ne,generator:ge,onBuildinExtensions:s,onDefinitions:o,onExtensionsFilter:pt})}import{useAppContext as dt}from"@blockcode/core";function Z(e){let t=globalThis.document,s=t.createElement("style");s.appendChild(t.createTextNode(e)),t.head.append(s)}Z("._1Ep-la_device-icon{width:20px;height:20px}._1Ep-la_check-icon{margin-right:calc(var(--space)/2);visibility:hidden;width:14px}._1Ep-la_check-icon._1Ep-la_checked{visibility:visible}._1Ep-la_blank-check-item>div{padding-left:calc(var(--space)/2 + 14px)}");var b={deviceIcon:"_1Ep-la_device-icon",blankCheckItem:"_1Ep-la_blank-check-item",checkIcon:"_1Ep-la_check-icon",checked:"_1Ep-la_checked"};var we="./assets/icon-device-40zreghe.png";import{jsx as mt}from"preact/jsx-runtime";function Ie(){let{appState:e}=dt();return mt("img",{className:b.deviceIcon,src:we})}import{useProjectContext as Rt,Text as V}from"@blockcode/core";import{jsx as F}from"preact/jsx-runtime";function ve(){let{meta:e}=Rt();switch(e.value.boardType){case c.ESP32S3:return F(V,{id:"esp32.menubar.device.esp32s3",defaultMessage:"ESP32-S3"});case c.ESP32C3:return F(V,{id:"esp32.menubar.device.esp32c3",defaultMessage:"ESP32-C3"});case c.ESP32_IOT_BOARD:return F(V,{id:"esp32.menubar.device.esp32IotBoard",defaultMessage:"ESP32 IOT Board"})}return F(V,{id:"esp32.menubar.device.esp32",defaultMessage:"ESP32"})}import{useCallback as Ge}from"preact/hooks";import{nanoid as Ct,classNames as He}from"@blockcode/utils";import{useProjectContext as At,setAlert as ie,delAlert as Dt}from"@blockcode/core";import{MPYUtils as W}from"@blockcode/board";import{sleepMs as Ye}from"@blockcode/utils";var U=[{usbVendorId:12346},{usbVendorId:6790}];import{Spinner as Pt,Text as ne,MenuSection as yt,MenuItem as ze}from"@blockcode/core";import{useEffect as bt,useCallback as Et}from"preact/hooks";import{classNames as J}from"@blockcode/utils";import{useProjectContext as kt,setMeta as Ce,Text as j,MenuSection as Ae,MenuItem as ee}from"@blockcode/core";var B="./assets/icon-check-5hn8sb1h.svg";import{jsx as v,jsxs as y,Fragment as Ot}from"preact/jsx-runtime";function De({itemClassName:e}){let{meta:t}=kt();bt(()=>{if(!t.value.boardType)Ce("boardType",c.ESP32S3)},[]);let s=Et((o)=>()=>{Ce({boardType:o})},[]);return y(Ot,{children:[y(Ae,{children:[y(ee,{className:e,onClick:s(c.ESP32),children:[v("img",{className:J(b.checkIcon,{[b.checked]:t.value.boardType===c.ESP32}),src:B}),v(j,{id:"esp32.menubar.device.esp32",defaultMessage:"ESP32"})]}),y(ee,{className:e,onClick:s(c.ESP32S3),children:[v("img",{className:J(b.checkIcon,{[b.checked]:t.value.boardType===c.ESP32S3}),src:B}),v(j,{id:"esp32.menubar.device.esp32s3",defaultMessage:"ESP32-S3"})]})]}),v(Ae,{children:y(ee,{className:e,onClick:s(c.ESP32_IOT_BOARD),children:[v("img",{className:J(b.checkIcon,{[b.checked]:t.value.boardType===c.ESP32_IOT_BOARD}),src:B}),v(j,{id:"esp32.menubar.device.esp32IotBoard",defaultMessage:"ESP32 IOT Board"})]})})]})}import{useEffect as Me,useMemo as xe}from"preact/hooks";import{useSignal as Le}from"@preact/signals";import{nanoid as Ve,classNames as _t,sleep as ft,arrayBufferToBinaryString as Fe,getBinaryCache as Ue,setBinaryCache as Nt}from"@blockcode/utils";import{useProjectContext as Tt,setAlert as M,delAlert as gt,openPromptModal as _o}from"@blockcode/core";import{ESPTool as D}from"@blockcode/board";var ho="0.1.5";var ye={iotboard:{download:"https://firmware.blockcode.fun/iotboard"}};import{Text as C,Spinner as se,MenuSection as St,MenuItem as wt}from"@blockcode/core";import{jsx as k}from"preact/jsx-runtime";var E=null,It=(e)=>{if(!E)E=Ve();if(e<100)M({id:E,icon:k(se,{level:"success"}),message:k(C,{id:"esp32.menubar.device.restoring",defaultMessage:"Firmware restoring...{progress}%",progress:e})});else M({id:E,icon:k(se,{level:"success"}),message:k(C,{id:"esp32.menubar.device.recovering",defaultMessage:"Recovering..."})})},te=()=>{gt(E),E=null},oe=(e)=>{if(e==="NotFoundError")return;M("connectionError",1000)},Be=async(e)=>{try{return await fetch(e,{method:"GET"})}catch(t){return await ft(1),Be(e)}},A=async(e,t,s,o,n)=>{if(n.value)return;let i=await Ue(e);if(i?.hash===s&&i?.binaryString){n.value=!0,delete A.downloading;return}if(A.downloading)return;A.downloading=!0;let r=await(await Be(t)).arrayBuffer();delete A.downloading;let l=await crypto.subtle.digest("SHA-256",r);if(Array.from(new Uint8Array(l)).map((f)=>f.toString(16).padStart(2,"0")).join("")!==s){A(e,t,s,o,n);return}await Nt(e,{version:o,hash:s,binaryString:Fe(r)}),n.value=!0},$e=async(e,t)=>{if(!E)E=Ve();M({id:E,icon:k(se,{level:"success"}),message:k(C,{id:"esp32.menubar.device.erasing",defaultMessage:"Erasing..."})});let s=D.check(e).catch(()=>{oe(),te(),D.disconnect(e)});try{await e.main(),await D.writeFlash(e,t,!0,(o)=>It(o)),M({id:E,icon:null,message:k(C,{id:"esp32.menubar.device.restoreDone",defaultMessage:"Firmware resotre completed!"}),onClose:te})}catch(o){oe(o.name),te()}finally{s.cancel()}await D.disconnect(e)},vt=async(e)=>{if(E)return;let t;try{t=await D.connect(U,460800)}catch(o){oe(o.name)}if(!t)return;if(e){let o=await Ue(e);if(o)$e(t,[{data:o.binaryString,address:0}]);return}let s=document.createElement("input");s.type="file",s.accept=".bin",s.multiple=!1,s.click(),s.addEventListener("cancel",()=>D.disconnect(t)),s.addEventListener("change",async(o)=>{let n=new FileReader;n.readAsArrayBuffer(o.target.files[0]),n.addEventListener("load",(i)=>$e(t,[{data:Fe(i.target.result),address:0}]))})};function We({itemClassName:e}){let{meta:t}=Tt(),s=Le(!1),o=Le(null),n=xe(()=>{if(t.value.boardType===c.ESP32_IOT_BOARD)return"iotboardFirmware"},[t.value.boardType]),i=xe(()=>{if(t.value.boardType===c.ESP32_IOT_BOARD)return k(C,{id:"esp32.menubar.device.iotboardFirmware",defaultMessage:"Restore IOT Board firmware"})},[t.value.boardType]);return Me(()=>E=null,[]),Me(async()=>{if(!n)return;s.value=!1;let a=ye.iotboard.download;if(!o.value)o.value=await fetch(`${a}/version.json`).then((p)=>p.json());let r=`${a}/${o.value.download}`.replaceAll("{version}",o.value.version),l=o.value.hash;A(n,r,l,o.value.version,s)},[n]),k(St,{children:k(wt,{disabled:E||i&&!s.value,className:_t(e,b.blankCheckItem),onClick:()=>vt(n),children:i?s.value?i:k(C,{id:"esp32.menubar.device.caching",defaultMessage:"Caching latest firmware..."}):k(C,{id:"esp32.menubar.device.firmware",defaultMessage:"Restore firmware"})})})}import{jsx as S,jsxs as Ke,Fragment as Mt}from"preact/jsx-runtime";var _=null,re=()=>{Dt(_),_=null},Xe=(e)=>{if(!_)_=Ct();if(e<100)ie({id:_,icon:S(Pt,{level:"success"}),message:S(ne,{id:"gui.alert.downloadingProgress",defaultMessage:"Downloading...{progress}%",progress:e})});else ie("downloadCompleted",{id:_}),setTimeout(re,2000)},G=(e)=>{if(e==="NotFoundError")return;ie("connectionError",1000)},qe=async(e,t,s)=>{let o=W.check(e).catch(()=>{G(),re()}),n=[].concat(t,s);Xe(0);try{await W.write(e,n,Xe),e.exitRawRepl(),await Ye(1000),e.reset(),await Ye(1000)}catch(i){console.log(i),G(i),re()}finally{e.disconnect()}o.cancel()};function Qe({itemClassName:e}){let{meta:t,file:s,assets:o}=At(),n=Ge(async()=>{if(_)return;let a;try{a=await W.connect(U,{baudRate:115200})}catch(r){console.log(r),G(r.name)}if(!a)return;qe(a,s.value,o.value)},[]),i=Ge(async()=>{if(_)return;let a;try{a=await W.connectBLE()}catch(r){console.log(r),G(r.name)}if(!a)return;qe(a,s.value,o.value)},[]);return Ke(Mt,{children:[Ke(yt,{children:[t.value.boardType===c.ESP32_IOT_BOARD&&S(ze,{disabled:_,className:He(e,b.blankCheckItem),label:S(ne,{id:"esp32.menubar.device.downloadBle",defaultMessage:"Download program via Bluetooth (BLE)"}),onClick:i}),S(ze,{disabled:_,className:He(e,b.blankCheckItem),label:S(ne,{id:"esp32.menubar.device.download",defaultMessage:"Download program via Serial Port"}),onClick:n})]}),S(De,{itemClassName:e}),S(We,{itemClassName:e})]})}var Ze={assets:[],files:[{id:"main",type:"text/x-python"}]};import{jsx as ae}from"preact/jsx-runtime";var jo={onNew(){return Ze},onSave(e,t,s){let o=[];return e=e.map((n)=>{return o.push(n.extensions),{id:n.id,type:n.type,xml:n.xml}}),{files:e,assets:t,meta:{extensions:Array.from(new Set(o.flat())),boardType:s.boardType??c.ESP32,classicEvents:s.classicEvents??!1}}},async onThumb(){let e=x.getMainWorkspace();if(e){let t=e.getCanvas();if(t)return await xt(t,{})}},onUndo(e){if(e instanceof MouseEvent)x.getMainWorkspace()?.undo(!1)},onRedo(e){if(e instanceof MouseEvent)x.getMainWorkspace()?.undo(!0)},onEnableUndo(){let e=x.getMainWorkspace();return e?.undoStack_&&e.undoStack_.length!==0},onEnableRedo(){let e=x.getMainWorkspace();return e?.redoStack_&&e.redoStack_.length!==0},menuItems:[{icon:ae(Ie,{}),label:ae(ve,{}),Menu:Qe}],tabs:[{...Lt,Content:Se},{...Vt,Content:()=>ae($t,{})},{...Ft,disabled:!0}]};export{jo as default};
